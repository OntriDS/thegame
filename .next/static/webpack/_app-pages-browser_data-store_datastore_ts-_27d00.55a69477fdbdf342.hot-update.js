"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_data-store_datastore_ts-_27d00",{

/***/ "(app-pages-browser)/./lib/client-api.ts":
/*!***************************!*\
  !*** ./lib/client-api.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientAPI: function() { return /* binding */ ClientAPI; }\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ ClientAPI auto */ const ClientAPI = {\n    // TASKS\n    getTasks: async ()=>{\n        const res = await fetch(\"/api/tasks\");\n        if (!res.ok) throw new Error(\"Failed to fetch tasks\");\n        return await res.json();\n    },\n    getTaskById: async (id)=>{\n        const res = await fetch(\"/api/tasks/\".concat(id));\n        if (!res.ok) return null;\n        return await res.json();\n    },\n    upsertTask: async (task)=>{\n        const res = await fetch(\"/api/tasks\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(task)\n        });\n        if (!res.ok) throw new Error(\"Failed to save task\");\n        return await res.json();\n    },\n    deleteTask: async (id)=>{\n        const res = await fetch(\"/api/tasks/\".concat(id), {\n            method: \"DELETE\"\n        });\n        if (!res.ok) throw new Error(\"Failed to delete task\");\n    },\n    // QUEUED OPERATIONS (Safety belt for real money operations)\n    upsertTaskQueued: async function(task) {\n        let priority = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        const res = await fetch(\"/api/tasks/queued\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                task,\n                priority\n            })\n        });\n        if (!res.ok) throw new Error(\"Failed to queue task\");\n        const result = await res.json();\n        return result.queueId;\n    },\n    // ITEMS\n    getItems: async ()=>{\n        const res = await fetch(\"/api/items\");\n        if (!res.ok) throw new Error(\"Failed to fetch items\");\n        return await res.json();\n    },\n    getItemById: async (id)=>{\n        const res = await fetch(\"/api/items/\".concat(id));\n        if (!res.ok) return null;\n        return await res.json();\n    },\n    upsertItem: async (item)=>{\n        const res = await fetch(\"/api/items\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(item)\n        });\n        if (!res.ok) throw new Error(\"Failed to save item\");\n        return await res.json();\n    },\n    deleteItem: async (id)=>{\n        const res = await fetch(\"/api/items/\".concat(id), {\n            method: \"DELETE\"\n        });\n        if (!res.ok) throw new Error(\"Failed to delete item\");\n    },\n    upsertItemQueued: async function(item) {\n        let priority = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        const res = await fetch(\"/api/items/queued\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                item,\n                priority\n            })\n        });\n        if (!res.ok) throw new Error(\"Failed to queue item\");\n        const result = await res.json();\n        return result.queueId;\n    },\n    // SALES\n    getSales: async ()=>{\n        const res = await fetch(\"/api/sales\");\n        if (!res.ok) throw new Error(\"Failed to fetch sales\");\n        return await res.json();\n    },\n    getSaleById: async (id)=>{\n        const res = await fetch(\"/api/sales/\".concat(id));\n        if (!res.ok) return null;\n        return await res.json();\n    },\n    upsertSale: async (sale)=>{\n        const res = await fetch(\"/api/sales\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(sale)\n        });\n        if (!res.ok) throw new Error(\"Failed to save sale\");\n        return await res.json();\n    },\n    deleteSale: async (id)=>{\n        const res = await fetch(\"/api/sales/\".concat(id), {\n            method: \"DELETE\"\n        });\n        if (!res.ok) throw new Error(\"Failed to delete sale\");\n    },\n    upsertSaleQueued: async function(sale) {\n        let priority = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        const res = await fetch(\"/api/sales/queued\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                sale,\n                priority\n            })\n        });\n        if (!res.ok) throw new Error(\"Failed to queue sale\");\n        const result = await res.json();\n        return result.queueId;\n    },\n    // FINANCIALS\n    getFinancialRecords: async ()=>{\n        const res = await fetch(\"/api/financials\");\n        if (!res.ok) throw new Error(\"Failed to fetch financials\");\n        return await res.json();\n    },\n    getFinancialRecordById: async (id)=>{\n        const res = await fetch(\"/api/financials/\".concat(id));\n        if (!res.ok) return null;\n        return await res.json();\n    },\n    upsertFinancialRecord: async (record)=>{\n        const res = await fetch(\"/api/financials\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(record)\n        });\n        if (!res.ok) throw new Error(\"Failed to save financial\");\n        return await res.json();\n    },\n    deleteFinancialRecord: async (id)=>{\n        const res = await fetch(\"/api/financials/\".concat(id), {\n            method: \"DELETE\"\n        });\n        if (!res.ok) throw new Error(\"Failed to delete financial\");\n    },\n    upsertFinancialRecordQueued: async function(record) {\n        let priority = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        const res = await fetch(\"/api/financials/queued\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                record,\n                priority\n            })\n        });\n        if (!res.ok) throw new Error(\"Failed to queue financial record\");\n        const result = await res.json();\n        return result.queueId;\n    },\n    // CHARACTERS\n    getCharacters: async ()=>{\n        const res = await fetch(\"/api/characters\");\n        if (!res.ok) throw new Error(\"Failed to fetch characters\");\n        return await res.json();\n    },\n    getCharacterById: async (id)=>{\n        const res = await fetch(\"/api/characters/\".concat(id));\n        if (!res.ok) return null;\n        return await res.json();\n    },\n    upsertCharacter: async (character)=>{\n        const res = await fetch(\"/api/characters\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(character)\n        });\n        if (!res.ok) throw new Error(\"Failed to save character\");\n        return await res.json();\n    },\n    deleteCharacter: async (id)=>{\n        const res = await fetch(\"/api/characters/\".concat(id), {\n            method: \"DELETE\"\n        });\n        if (!res.ok) throw new Error(\"Failed to delete character\");\n    },\n    // PLAYERS\n    getPlayers: async ()=>{\n        const res = await fetch(\"/api/players\");\n        if (!res.ok) throw new Error(\"Failed to fetch players\");\n        return await res.json();\n    },\n    getPlayerById: async (id)=>{\n        const res = await fetch(\"/api/players/\".concat(id));\n        if (!res.ok) return null;\n        return await res.json();\n    },\n    upsertPlayer: async (player)=>{\n        const res = await fetch(\"/api/players\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(player)\n        });\n        if (!res.ok) throw new Error(\"Failed to save player\");\n        return await res.json();\n    },\n    deletePlayer: async (id)=>{\n        const res = await fetch(\"/api/players/\".concat(id), {\n            method: \"DELETE\"\n        });\n        if (!res.ok) throw new Error(\"Failed to delete player\");\n    },\n    // LINKS\n    getLinksFor: async (params)=>{\n        const res = await fetch(\"/api/links?entityType=\".concat(params.type, \"&entityId=\").concat(params.id));\n        if (!res.ok) {\n            console.error(\"Failed to fetch links\");\n            return [];\n        }\n        return await res.json();\n    },\n    getAllLinks: async ()=>{\n        const res = await fetch(\"/api/links\");\n        if (!res.ok) {\n            console.error(\"Failed to fetch all links\");\n            return [];\n        }\n        return await res.json();\n    },\n    removeLink: async (linkId)=>{\n        const res = await fetch(\"/api/links/\".concat(linkId), {\n            method: \"DELETE\"\n        });\n        if (!res.ok) throw new Error(\"Failed to remove link\");\n    },\n    removeLogEntry: async (logType, entityId)=>{\n        const res = await fetch(\"/api/\".concat(logType, \"-log\"), {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                entityId\n            })\n        });\n        if (!res.ok) {\n            return {\n                success: false,\n                message: \"Failed to remove \".concat(logType, \" log entry\")\n            };\n        }\n        return await res.json();\n    },\n    // SITES\n    getSites: async ()=>{\n        const res = await fetch(\"/api/sites\");\n        if (!res.ok) throw new Error(\"Failed to fetch sites\");\n        return await res.json();\n    },\n    getSiteById: async (id)=>{\n        const res = await fetch(\"/api/sites/\".concat(id));\n        if (!res.ok) return null;\n        return await res.json();\n    },\n    upsertSite: async (site)=>{\n        const res = await fetch(\"/api/sites\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(site)\n        });\n        if (!res.ok) throw new Error(\"Failed to save site\");\n        return await res.json();\n    },\n    deleteSite: async (id)=>{\n        const res = await fetch(\"/api/sites/\".concat(id), {\n            method: \"DELETE\"\n        });\n        if (!res.ok) throw new Error(\"Failed to delete site\");\n    },\n    // Placeholder methods for features not yet implemented\n    getAccount: async (id)=>{\n        throw new Error(\"Account entity not yet implemented in KV-only system\");\n    },\n    upsertAccount: async (account)=>{\n        throw new Error(\"Account entity not yet implemented in KV-only system\");\n    },\n    // ASSETS MANAGEMENT\n    getCompanyAssets: async ()=>{\n        const res = await fetch(\"/api/assets/company\");\n        if (!res.ok) throw new Error(\"Failed to fetch company assets\");\n        return await res.json();\n    },\n    saveCompanyAssets: async (assets)=>{\n        const res = await fetch(\"/api/assets/company\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(assets)\n        });\n        if (!res.ok) throw new Error(\"Failed to save company assets\");\n    },\n    getPersonalAssets: async ()=>{\n        const res = await fetch(\"/api/assets/personal\");\n        if (!res.ok) throw new Error(\"Failed to fetch personal assets\");\n        return await res.json();\n    },\n    savePersonalAssets: async (assets)=>{\n        const res = await fetch(\"/api/assets/personal\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(assets)\n        });\n        if (!res.ok) throw new Error(\"Failed to save personal assets\");\n    },\n    // CONVERSION RATES\n    getConversionRates: async ()=>{\n        const res = await fetch(\"/api/settings/conversion-rates\");\n        if (!res.ok) throw new Error(\"Failed to fetch conversion rates\");\n        return await res.json();\n    },\n    saveConversionRates: async (rates)=>{\n        const res = await fetch(\"/api/settings/conversion-rates\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(rates)\n        });\n        if (!res.ok) throw new Error(\"Failed to save conversion rates\");\n    },\n    // LEGACY COMPATIBILITY\n    getPointsConversionRates: async ()=>{\n        return await ClientAPI.getConversionRates();\n    },\n    // UTILITY HELPERS (client-side calculations)\n    getItemTotalQuantity: (itemId, items)=>{\n        const item = items.find((i)=>i.id === itemId);\n        if (!item) return 0;\n        // Sum up all stock across all sites using StockPoint[] array\n        return item.stock.reduce((sum, sp)=>sum + sp.quantity, 0);\n    },\n    updateStockAtSite: async (itemId, siteId, quantity)=>{\n        // Get current item\n        const currentItem = await ClientAPI.getItemById(itemId);\n        if (!currentItem) throw new Error(\"Item not found\");\n        // Update stock at site using StockPoint[] array\n        const stockIndex = currentItem.stock.findIndex((sp)=>sp.siteId === siteId);\n        const updatedStock = [\n            ...currentItem.stock\n        ];\n        if (stockIndex >= 0) {\n            if (quantity === 0) {\n                updatedStock.splice(stockIndex, 1);\n            } else {\n                updatedStock[stockIndex] = {\n                    siteId,\n                    quantity\n                };\n            }\n        } else if (quantity > 0) {\n            updatedStock.push({\n                siteId,\n                quantity\n            });\n        }\n        // Save updated item\n        return await ClientAPI.upsertItem({\n            ...currentItem,\n            stock: updatedStock\n        });\n    },\n    convertPointsToJ$: function(points) {\n        let conversionRate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100;\n        // Default conversion rate: 100 points = 1 J$\n        return Math.floor(points / conversionRate);\n    },\n    // Additional utility methods for inventory\n    getItemsByModel: (items)=>{\n        const grouped = {};\n        items.forEach((item)=>{\n            const key = \"\".concat(item.type, \"|\").concat(item.subItemType || \"\", \"|\").concat(item.name, \"|\").concat(item.collection || \"\");\n            if (!grouped[key]) {\n                grouped[key] = [];\n            }\n            grouped[key].push(item);\n        });\n        return grouped;\n    },\n    getModelTotalQuantity: (items, selectedSiteIds)=>{\n        return items.reduce((total, item)=>{\n            if (selectedSiteIds.size === 0) {\n                return total + item.stock.reduce((sum, sp)=>sum + sp.quantity, 0);\n            }\n            return total + item.stock.filter((sp)=>selectedSiteIds.has(sp.siteId)).reduce((sum, sp)=>sum + sp.quantity, 0);\n        }, 0);\n    },\n    getItemModelKey: (item)=>{\n        return \"\".concat(item.type, \"|\").concat(item.subItemType || \"\", \"|\").concat(item.name, \"|\").concat(item.collection || \"\");\n    },\n    // Financial records filtering methods\n    getFinancialRecordsByMonth: async (year, month, type)=>{\n        const allRecords = await ClientAPI.getFinancialRecords();\n        return allRecords.filter((record)=>record.year === year && record.month === month && record.type === type);\n    },\n    // Additional methods needed by components\n    getQuantityAtSite: (item, siteId)=>{\n        var _item_stock_find;\n        return ((_item_stock_find = item.stock.find((sp)=>sp.siteId === siteId)) === null || _item_stock_find === void 0 ? void 0 : _item_stock_find.quantity) || 0;\n    },\n    moveItemsBetweenSites: async (item, fromSiteId, toSiteId, quantity)=>{\n        const updatedItem = {\n            ...item\n        };\n        // Find source stock\n        const sourceStockIndex = updatedItem.stock.findIndex((sp)=>sp.siteId === fromSiteId);\n        if (sourceStockIndex === -1) {\n            throw new Error(\"Item not found at source site: \".concat(fromSiteId));\n        }\n        const sourceStock = updatedItem.stock[sourceStockIndex];\n        if (sourceStock.quantity < quantity) {\n            throw new Error(\"Insufficient quantity at source. Available: \".concat(sourceStock.quantity, \", Requested: \").concat(quantity));\n        }\n        // Reduce source quantity\n        if (sourceStock.quantity === quantity) {\n            // Remove stock point if moving all items\n            updatedItem.stock = updatedItem.stock.filter((_, i)=>i !== sourceStockIndex);\n        } else {\n            // Reduce quantity\n            updatedItem.stock[sourceStockIndex] = {\n                ...sourceStock,\n                quantity: sourceStock.quantity - quantity\n            };\n        }\n        // Add to destination (or increase existing stock)\n        const destStockIndex = updatedItem.stock.findIndex((sp)=>sp.siteId === toSiteId);\n        if (destStockIndex >= 0) {\n            // Increase existing stock\n            updatedItem.stock[destStockIndex] = {\n                ...updatedItem.stock[destStockIndex],\n                quantity: updatedItem.stock[destStockIndex].quantity + quantity\n            };\n        } else {\n            // Add new stock point\n            updatedItem.stock.push({\n                siteId: toSiteId,\n                quantity: quantity\n            });\n        }\n        return updatedItem;\n    },\n    bulkImportItems: async (items)=>{\n        try {\n            for (const item of items){\n                await ClientAPI.upsertItem(item);\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Failed to bulk import items:\", error);\n            return false;\n        }\n    },\n    bulkMergeItems: async (items)=>{\n        console.warn(\"[ClientAPI] bulkMergeItems not implemented yet\");\n        return false;\n    },\n    bulkAddItemsOnly: async (items)=>{\n        console.warn(\"[ClientAPI] bulkAddItemsOnly not implemented yet\");\n        return {\n            success: false,\n            addedCount: 0\n        };\n    },\n    getAccounts: async ()=>{\n        console.warn(\"[ClientAPI] getAccounts not implemented yet\");\n        return [];\n    },\n    // BULK OPERATION LOGGING\n    logBulkImport: async (entityType, details)=>{\n        const res = await fetch(\"/api/logs/bulk\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                entityType,\n                operation: \"import\",\n                ...details\n            })\n        });\n        if (!res.ok) throw new Error(\"Failed to log bulk import\");\n    },\n    logBulkExport: async (entityType, details)=>{\n        const res = await fetch(\"/api/logs/bulk\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                entityType,\n                operation: \"export\",\n                ...details\n            })\n        });\n        if (!res.ok) throw new Error(\"Failed to log bulk export\");\n    },\n    // QUEUE MANAGEMENT\n    getQueueStatus: async ()=>{\n        const res = await fetch(\"/api/queue/status\");\n        if (!res.ok) throw new Error(\"Failed to get queue status\");\n        return await res.json();\n    },\n    configureQueue: async (options)=>{\n        const res = await fetch(\"/api/queue/configure\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(options)\n        });\n        if (!res.ok) throw new Error(\"Failed to configure queue\");\n    },\n    stopQueue: async ()=>{\n        const res = await fetch(\"/api/queue/stop\", {\n            method: \"POST\"\n        });\n        if (!res.ok) throw new Error(\"Failed to stop queue\");\n    },\n    clearQueue: async ()=>{\n        const res = await fetch(\"/api/queue/clear\", {\n            method: \"POST\"\n        });\n        if (!res.ok) throw new Error(\"Failed to clear queue\");\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/client-api.ts\n"));

/***/ })

});