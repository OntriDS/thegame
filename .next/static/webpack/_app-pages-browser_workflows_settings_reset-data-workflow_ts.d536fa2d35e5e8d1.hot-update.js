"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_workflows_settings_reset-data-workflow_ts",{

/***/ "(app-pages-browser)/./workflows/settings/reset-data-workflow.ts":
/*!***************************************************!*\
  !*** ./workflows/settings/reset-data-workflow.ts ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResetDataWorkflow: function() { return /* binding */ ResetDataWorkflow; }\n/* harmony export */ });\n/* harmony import */ var _vercel_kv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/kv */ \"(app-pages-browser)/./node_modules/@vercel/kv/dist/index.js\");\n/* harmony import */ var _data_store_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/data-store/keys */ \"(app-pages-browser)/./data-store/keys.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// workflows/settings/reset-data-workflow.ts\n// Reset Data Workflow for KV-only architecture\n\n\nclass ResetDataWorkflow {\n    /**\r\n   * Execute reset data operation\r\n   */ static async execute() {\n        let mode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"defaults\";\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83D\\uDD04 Starting reset data operation (mode: \".concat(mode, \")...\"));\n            const isKV = Boolean(process.env.KV_REST_API_URL);\n            const isServer = \"object\" === \"undefined\";\n            const results = [];\n            const errors = [];\n            console.log(\"[ResetDataWorkflow] \\uD83C\\uDF0D Environment: \".concat(isKV ? \"KV (Production)\" : \"Local (Development)\"));\n            console.log(\"[ResetDataWorkflow] \\uD83D\\uDDA5️ Context: \".concat(isServer ? \"Server\" : \"Client\"));\n            // For local environment, we need to run on client side\n            if (!isKV && isServer) {\n                console.log(\"[ResetDataWorkflow] ⚠️ Local environment detected on server - returning instruction for client-side execution\");\n                return {\n                    success: true,\n                    message: \"Reset requires client-side execution for local environment\",\n                    data: {\n                        results: [\n                            \"Client-side reset required for local environment\"\n                        ],\n                        errors: [],\n                        mode,\n                        environment: \"local\",\n                        requiresClientExecution: true\n                    }\n                };\n            }\n            // Handle client-side execution for localhost\n            if (!isKV && !isServer) {\n                console.log(\"[ResetDataWorkflow] \\uD83D\\uDDA5️ Running client-side reset for localhost...\");\n                return await this.executeClientSideReset(mode, results, errors);\n            }\n            // Define reset options\n            const options = {\n                mode,\n                seedSites: mode === \"defaults\",\n                preserveLogs: false\n            };\n            // Clear all entity data\n            await this.clearAllEntityData(results, errors);\n            // Clear all links\n            await this.clearAllLinks(results, errors);\n            // Clear logs if not preserving\n            if (!options.preserveLogs) {\n                await this.clearAllLogs(results, errors);\n            }\n            // Seed default data if requested\n            if (options.seedSites) {\n                await this.seedDefaultSites(results, errors);\n            }\n            const success = errors.length === 0;\n            const message = success ? \"Successfully reset data (\".concat(mode, \" mode) - \").concat(results.length, \" operations completed\") : \"Reset completed with \".concat(errors.length, \" errors - \").concat(results.length, \" operations completed\");\n            console.log(\"[ResetDataWorkflow] ✅ Reset data operation completed: \".concat(message));\n            return {\n                success,\n                message,\n                data: {\n                    results,\n                    errors,\n                    mode,\n                    environment: isKV ? \"kv\" : \"local\"\n                }\n            };\n        } catch (error) {\n            console.error(\"[ResetDataWorkflow] ❌ Reset data operation failed:\", error);\n            return {\n                success: false,\n                message: \"Reset data operation failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"),\n                data: {\n                    results: [],\n                    errors: [\n                        error instanceof Error ? error.message : \"Unknown error\"\n                    ],\n                    mode,\n                    environment: \"unknown\"\n                }\n            };\n        }\n    }\n    /**\r\n   * Clear all entity data from KV\r\n   */ static async clearAllEntityData(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83D\\uDDD1️ Clearing all entity data...\");\n            const entityTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\"\n            ];\n            for (const entityType of entityTypes){\n                try {\n                    // Get all entity IDs from index\n                    const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(entityType);\n                    const entityIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(indexKey);\n                    if (entityIds.length > 0) {\n                        // Delete all entity data\n                        const dataKeys = entityIds.map((id)=>(0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(entityType, id));\n                        await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(...dataKeys);\n                        // Clear the index\n                        await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(indexKey);\n                        results.push(\"Cleared \".concat(entityIds.length, \" \").concat(entityType, \" entities\"));\n                        console.log(\"[ResetDataWorkflow] ✅ Cleared \".concat(entityIds.length, \" \").concat(entityType, \" entities\"));\n                    } else {\n                        results.push(\"No \".concat(entityType, \" entities to clear\"));\n                    }\n                } catch (error) {\n                    const errorMsg = \"Failed to clear \".concat(entityType, \": \").concat(error instanceof Error ? error.message : \"Unknown error\");\n                    errors.push(errorMsg);\n                    console.error(\"[ResetDataWorkflow] ❌ \".concat(errorMsg));\n                }\n            }\n        } catch (error) {\n            const errorMsg = \"Failed to clear entity data: \".concat(error instanceof Error ? error.message : \"Unknown error\");\n            errors.push(errorMsg);\n            console.error(\"[ResetDataWorkflow] ❌ \".concat(errorMsg));\n        }\n    }\n    /**\r\n   * Clear all links from KV\r\n   */ static async clearAllLinks(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83D\\uDD17 Clearing all links...\");\n            // Get all link IDs\n            const linksIndexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"links\");\n            const linkIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(linksIndexKey);\n            if (linkIds.length > 0) {\n                // Delete all link data\n                const linkKeys = linkIds.map((id)=>\"links:link:\".concat(id));\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(...linkKeys);\n                // Clear the links index\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(linksIndexKey);\n                // Clear all entity-specific link indexes\n                const entityTypes = [\n                    \"tasks\",\n                    \"items\",\n                    \"sales\",\n                    \"financials\",\n                    \"characters\",\n                    \"players\",\n                    \"sites\"\n                ];\n                for (const entityType of entityTypes){\n                    const entityLinkIndexPattern = \"index:links:by-entity:\".concat(entityType, \":*\");\n                    const entityLinkKeys = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.keys(entityLinkIndexPattern);\n                    if (entityLinkKeys.length > 0) {\n                        await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(...entityLinkKeys);\n                    }\n                }\n                results.push(\"Cleared \".concat(linkIds.length, \" links\"));\n                console.log(\"[ResetDataWorkflow] ✅ Cleared \".concat(linkIds.length, \" links\"));\n            } else {\n                results.push(\"No links to clear\");\n            }\n        } catch (error) {\n            const errorMsg = \"Failed to clear links: \".concat(error instanceof Error ? error.message : \"Unknown error\");\n            errors.push(errorMsg);\n            console.error(\"[ResetDataWorkflow] ❌ \".concat(errorMsg));\n        }\n    }\n    /**\r\n   * Clear all logs from KV\r\n   */ static async clearAllLogs(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83D\\uDCDD Clearing all logs...\");\n            const logTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\",\n                \"links\"\n            ];\n            for (const logType of logTypes){\n                try {\n                    const logKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildLogKey)(logType);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(logKey);\n                    results.push(\"Cleared \".concat(logType, \" logs\"));\n                } catch (error) {\n                    const errorMsg = \"Failed to clear \".concat(logType, \" logs: \").concat(error instanceof Error ? error.message : \"Unknown error\");\n                    errors.push(errorMsg);\n                    console.error(\"[ResetDataWorkflow] ❌ \".concat(errorMsg));\n                }\n            }\n        } catch (error) {\n            const errorMsg = \"Failed to clear logs: \".concat(error instanceof Error ? error.message : \"Unknown error\");\n            errors.push(errorMsg);\n            console.error(\"[ResetDataWorkflow] ❌ \".concat(errorMsg));\n        }\n    }\n    /**\r\n   * Seed default sites\r\n   */ static async seedDefaultSites(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83C\\uDF31 Seeding default sites...\");\n            const defaultSites = [\n                {\n                    id: \"home\",\n                    name: \"Home\",\n                    type: \"physical\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Uvita\",\n                        location: {\n                            lat: 9.1500,\n                            lng: -83.7500\n                        }\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"feria-box\",\n                    name: \"Feria Box\",\n                    type: \"physical\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Uvita\",\n                        location: {\n                            lat: 9.1500,\n                            lng: -83.7500\n                        }\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"digital-space\",\n                    name: \"Digital Space\",\n                    type: \"cloud\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Cloud\",\n                        location: null\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                }\n            ];\n            for (const site of defaultSites){\n                try {\n                    const dataKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(\"sites\", site.id);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.set(dataKey, JSON.stringify(site));\n                    // Add to sites index\n                    const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"sites\");\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.sadd(indexKey, site.id);\n                    results.push(\"Seeded site: \".concat(site.name));\n                } catch (error) {\n                    const errorMsg = \"Failed to seed site \".concat(site.name, \": \").concat(error instanceof Error ? error.message : \"Unknown error\");\n                    errors.push(errorMsg);\n                    console.error(\"[ResetDataWorkflow] ❌ \".concat(errorMsg));\n                }\n            }\n            console.log(\"[ResetDataWorkflow] ✅ Seeded default sites\");\n        } catch (error) {\n            const errorMsg = \"Failed to seed default sites: \".concat(error instanceof Error ? error.message : \"Unknown error\");\n            errors.push(errorMsg);\n            console.error(\"[ResetDataWorkflow] ❌ \".concat(errorMsg));\n        }\n    }\n    /**\r\n   * Execute client-side reset for localhost (localStorage)\r\n   */ static async executeClientSideReset(mode, results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83D\\uDDA5️ Starting client-side reset (mode: \".concat(mode, \")...\"));\n            // Clear localStorage data\n            const keysToRemove = [];\n            // Find all data keys in localStorage\n            for(let i = 0; i < localStorage.length; i++){\n                const key = localStorage.key(i);\n                if (key && (key.startsWith(\"data:\") || key.startsWith(\"index:\") || key.startsWith(\"links:\") || key.startsWith(\"log:\") || key.startsWith(\"akiles:\"))) {\n                    keysToRemove.push(key);\n                }\n            }\n            // Remove all found keys\n            keysToRemove.forEach((key)=>{\n                localStorage.removeItem(key);\n                results.push(\"Removed localStorage key: \".concat(key));\n            });\n            // Seed default sites if in defaults mode\n            if (mode === \"defaults\") {\n                await this.seedDefaultSitesLocal(results, errors);\n            }\n            // Clear any cached data\n            if (\"caches\" in window) {\n                try {\n                    const cacheNames = await caches.keys();\n                    for (const cacheName of cacheNames){\n                        await caches.delete(cacheName);\n                        results.push(\"Cleared cache: \".concat(cacheName));\n                    }\n                } catch (cacheError) {\n                    console.warn(\"[ResetDataWorkflow] Cache clearing failed:\", cacheError);\n                }\n            }\n            console.log(\"[ResetDataWorkflow] ✅ Client-side reset completed: \".concat(results.length, \" operations\"));\n            return {\n                success: errors.length === 0,\n                message: \"Client-side reset completed (\".concat(mode, \" mode) - \").concat(results.length, \" operations completed\"),\n                data: {\n                    results,\n                    errors,\n                    mode,\n                    environment: \"local\"\n                }\n            };\n        } catch (error) {\n            const errorMsg = \"Client-side reset failed: \".concat(error instanceof Error ? error.message : \"Unknown error\");\n            errors.push(errorMsg);\n            console.error(\"[ResetDataWorkflow] ❌ \".concat(errorMsg));\n            return {\n                success: false,\n                message: errorMsg,\n                data: {\n                    results: [],\n                    errors,\n                    mode,\n                    environment: \"local\"\n                }\n            };\n        }\n    }\n    /**\r\n   * Seed default sites for localhost (localStorage)\r\n   */ static async seedDefaultSitesLocal(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83C\\uDF31 Seeding default sites for localhost...\");\n            const defaultSites = [\n                {\n                    id: \"home\",\n                    name: \"Home\",\n                    type: \"physical\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Uvita\",\n                        location: {\n                            lat: 9.1500,\n                            lng: -83.7500\n                        }\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"feria-box\",\n                    name: \"Feria Box\",\n                    type: \"physical\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Uvita\",\n                        location: {\n                            lat: 9.1500,\n                            lng: -83.7500\n                        }\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"digital-space\",\n                    name: \"Digital Space\",\n                    type: \"cloud\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Cloud\",\n                        location: null\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                }\n            ];\n            for (const site of defaultSites){\n                try {\n                    // Store site data\n                    const dataKey = \"data:sites:\".concat(site.id);\n                    localStorage.setItem(dataKey, JSON.stringify(site));\n                    // Add to sites index\n                    const indexKey = \"index:sites\";\n                    const existingIndex = localStorage.getItem(indexKey);\n                    const indexSet = new Set(existingIndex ? JSON.parse(existingIndex) : []);\n                    indexSet.add(site.id);\n                    localStorage.setItem(indexKey, JSON.stringify([\n                        ...indexSet\n                    ]));\n                    results.push(\"Seeded localStorage site: \".concat(site.name));\n                } catch (error) {\n                    const errorMsg = \"Failed to seed localStorage site \".concat(site.name, \": \").concat(error instanceof Error ? error.message : \"Unknown error\");\n                    errors.push(errorMsg);\n                    console.error(\"[ResetDataWorkflow] ❌ \".concat(errorMsg));\n                }\n            }\n            console.log(\"[ResetDataWorkflow] ✅ Seeded default sites for localhost\");\n        } catch (error) {\n            const errorMsg = \"Failed to seed default sites for localhost: \".concat(error instanceof Error ? error.message : \"Unknown error\");\n            errors.push(errorMsg);\n            console.error(\"[ResetDataWorkflow] ❌ \".concat(errorMsg));\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./workflows/settings/reset-data-workflow.ts\n"));

/***/ })

});