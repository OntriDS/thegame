"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_workflows_settings_reset-data-workflow_ts";
exports.ids = ["_ssr_workflows_settings_reset-data-workflow_ts"];
exports.modules = {

/***/ "(ssr)/./data-store/keys.ts":
/*!****************************!*\
  !*** ./data-store/keys.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildDataKey: () => (/* binding */ buildDataKey),\n/* harmony export */   buildEffectKey: () => (/* binding */ buildEffectKey),\n/* harmony export */   buildIndexKey: () => (/* binding */ buildIndexKey),\n/* harmony export */   buildLinkKey: () => (/* binding */ buildLinkKey),\n/* harmony export */   buildLinksIndexKey: () => (/* binding */ buildLinksIndexKey),\n/* harmony export */   buildLogKey: () => (/* binding */ buildLogKey)\n/* harmony export */ });\n// data-store/keys.ts\n// Centralized KV key builders. Keep shapes consistent across repositories.\n// Production-only system - no environment namespacing needed\nfunction buildDataKey(entity, id) {\n    return `data:${entity}:${id}`;\n}\nfunction buildIndexKey(entity) {\n    return `index:${entity}`; // set of ids\n}\nfunction buildLinksIndexKey(entityType, id) {\n    return `index:links:by-entity:${entityType}:${id}`; // set of link ids\n}\nfunction buildLinkKey(id) {\n    return `links:link:${id}`;\n}\nfunction buildEffectKey(effectKey) {\n    return `effects:${effectKey}`;\n}\nfunction buildLogKey(entity, yyyymm) {\n    return yyyymm ? `logs:${entity}:${yyyymm}` : `logs:${entity}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9kYXRhLXN0b3JlL2tleXMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEscUJBQXFCO0FBQ3JCLDJFQUEyRTtBQUMzRSw2REFBNkQ7QUFFdEQsU0FBU0EsYUFBYUMsTUFBYyxFQUFFQyxFQUFVO0lBQ3JELE9BQU8sQ0FBQyxLQUFLLEVBQUVELE9BQU8sQ0FBQyxFQUFFQyxHQUFHLENBQUM7QUFDL0I7QUFFTyxTQUFTQyxjQUFjRixNQUFjO0lBQzFDLE9BQU8sQ0FBQyxNQUFNLEVBQUVBLE9BQU8sQ0FBQyxFQUFFLGFBQWE7QUFDekM7QUFFTyxTQUFTRyxtQkFBbUJDLFVBQWtCLEVBQUVILEVBQVU7SUFDL0QsT0FBTyxDQUFDLHNCQUFzQixFQUFFRyxXQUFXLENBQUMsRUFBRUgsR0FBRyxDQUFDLEVBQUUsa0JBQWtCO0FBQ3hFO0FBRU8sU0FBU0ksYUFBYUosRUFBVTtJQUNyQyxPQUFPLENBQUMsV0FBVyxFQUFFQSxHQUFHLENBQUM7QUFDM0I7QUFFTyxTQUFTSyxlQUFlQyxTQUFpQjtJQUM5QyxPQUFPLENBQUMsUUFBUSxFQUFFQSxVQUFVLENBQUM7QUFDL0I7QUFFTyxTQUFTQyxZQUFZUixNQUFjLEVBQUVTLE1BQWU7SUFDekQsT0FBT0EsU0FDSCxDQUFDLEtBQUssRUFBRVQsT0FBTyxDQUFDLEVBQUVTLE9BQU8sQ0FBQyxHQUMxQixDQUFDLEtBQUssRUFBRVQsT0FBTyxDQUFDO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZ2FtZS1hZG1pbi8uL2RhdGEtc3RvcmUva2V5cy50cz83MGUyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGRhdGEtc3RvcmUva2V5cy50c1xyXG4vLyBDZW50cmFsaXplZCBLViBrZXkgYnVpbGRlcnMuIEtlZXAgc2hhcGVzIGNvbnNpc3RlbnQgYWNyb3NzIHJlcG9zaXRvcmllcy5cclxuLy8gUHJvZHVjdGlvbi1vbmx5IHN5c3RlbSAtIG5vIGVudmlyb25tZW50IG5hbWVzcGFjaW5nIG5lZWRlZFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGF0YUtleShlbnRpdHk6IHN0cmluZywgaWQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBkYXRhOiR7ZW50aXR5fToke2lkfWA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBidWlsZEluZGV4S2V5KGVudGl0eTogc3RyaW5nKTogc3RyaW5nIHtcclxuICByZXR1cm4gYGluZGV4OiR7ZW50aXR5fWA7IC8vIHNldCBvZiBpZHNcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTGlua3NJbmRleEtleShlbnRpdHlUeXBlOiBzdHJpbmcsIGlkOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiBgaW5kZXg6bGlua3M6YnktZW50aXR5OiR7ZW50aXR5VHlwZX06JHtpZH1gOyAvLyBzZXQgb2YgbGluayBpZHNcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTGlua0tleShpZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICByZXR1cm4gYGxpbmtzOmxpbms6JHtpZH1gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRFZmZlY3RLZXkoZWZmZWN0S2V5OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiBgZWZmZWN0czoke2VmZmVjdEtleX1gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRMb2dLZXkoZW50aXR5OiBzdHJpbmcsIHl5eXltbT86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIHl5eXltbVxyXG4gICAgPyBgbG9nczoke2VudGl0eX06JHt5eXl5bW19YFxyXG4gICAgOiBgbG9nczoke2VudGl0eX1gO1xyXG59XHJcblxyXG5cclxuIl0sIm5hbWVzIjpbImJ1aWxkRGF0YUtleSIsImVudGl0eSIsImlkIiwiYnVpbGRJbmRleEtleSIsImJ1aWxkTGlua3NJbmRleEtleSIsImVudGl0eVR5cGUiLCJidWlsZExpbmtLZXkiLCJidWlsZEVmZmVjdEtleSIsImVmZmVjdEtleSIsImJ1aWxkTG9nS2V5IiwieXl5eW1tIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./data-store/keys.ts\n");

/***/ }),

/***/ "(ssr)/./workflows/settings/reset-data-workflow.ts":
/*!***************************************************!*\
  !*** ./workflows/settings/reset-data-workflow.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResetDataWorkflow: () => (/* binding */ ResetDataWorkflow)\n/* harmony export */ });\n/* harmony import */ var _vercel_kv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/kv */ \"(ssr)/./node_modules/@vercel/kv/dist/index.js\");\n/* harmony import */ var _data_store_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/data-store/keys */ \"(ssr)/./data-store/keys.ts\");\n// workflows/settings/reset-data-workflow.ts\n// Reset Data Workflow for KV-only architecture\n\n\nclass ResetDataWorkflow {\n    /**\r\n   * Execute reset data operation\r\n   */ static async execute(mode = \"defaults\") {\n        try {\n            console.log(`[ResetDataWorkflow] üîÑ Starting reset data operation (mode: ${mode})...`);\n            const isKV = Boolean(process.env.KV_REST_API_URL);\n            const isServer = \"undefined\" === \"undefined\";\n            const results = [];\n            const errors = [];\n            console.log(`[ResetDataWorkflow] üåç Environment: ${isKV ? \"KV (Production)\" : \"Local (Development)\"}`);\n            console.log(`[ResetDataWorkflow] üñ•Ô∏è Context: ${isServer ? \"Server\" : \"Client\"}`);\n            // For local environment, we need to run on client side\n            if (!isKV && isServer) {\n                console.log(`[ResetDataWorkflow] ‚ö†Ô∏è Local environment detected on server - returning instruction for client-side execution`);\n                return {\n                    success: true,\n                    message: \"Reset requires client-side execution for local environment\",\n                    data: {\n                        results: [\n                            \"Client-side reset required for local environment\"\n                        ],\n                        errors: [],\n                        mode,\n                        environment: \"local\",\n                        requiresClientExecution: true\n                    }\n                };\n            }\n            // Handle client-side execution for localhost\n            if (!isKV && !isServer) {\n                console.log(`[ResetDataWorkflow] üñ•Ô∏è Running client-side reset for localhost...`);\n                return await this.executeClientSideReset(mode, results, errors);\n            }\n            // Define reset options\n            const options = {\n                mode,\n                seedSites: mode === \"defaults\",\n                preserveLogs: false\n            };\n            // Clear all entity data\n            await this.clearAllEntityData(results, errors);\n            // Clear all links\n            await this.clearAllLinks(results, errors);\n            // Clear logs if not preserving\n            if (!options.preserveLogs) {\n                await this.clearAllLogs(results, errors);\n            }\n            // Seed default data if requested\n            if (options.seedSites) {\n                await this.seedDefaultSites(results, errors);\n            }\n            const success = errors.length === 0;\n            const message = success ? `Successfully reset data (${mode} mode) - ${results.length} operations completed` : `Reset completed with ${errors.length} errors - ${results.length} operations completed`;\n            console.log(`[ResetDataWorkflow] ‚úÖ Reset data operation completed: ${message}`);\n            return {\n                success,\n                message,\n                data: {\n                    results,\n                    errors,\n                    mode,\n                    environment: isKV ? \"kv\" : \"local\"\n                }\n            };\n        } catch (error) {\n            console.error(\"[ResetDataWorkflow] ‚ùå Reset data operation failed:\", error);\n            return {\n                success: false,\n                message: `Reset data operation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                data: {\n                    results: [],\n                    errors: [\n                        error instanceof Error ? error.message : \"Unknown error\"\n                    ],\n                    mode,\n                    environment: \"unknown\"\n                }\n            };\n        }\n    }\n    /**\r\n   * Clear all entity data from KV\r\n   */ static async clearAllEntityData(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83D\\uDDD1Ô∏è Clearing all entity data...\");\n            const entityTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\"\n            ];\n            for (const entityType of entityTypes){\n                try {\n                    // Get all entity IDs from index\n                    const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(entityType);\n                    const entityIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(indexKey);\n                    if (entityIds.length > 0) {\n                        // Delete all entity data\n                        const dataKeys = entityIds.map((id)=>(0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(entityType, id));\n                        await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(...dataKeys);\n                        // Clear the index\n                        await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(indexKey);\n                        results.push(`Cleared ${entityIds.length} ${entityType} entities`);\n                        console.log(`[ResetDataWorkflow] ‚úÖ Cleared ${entityIds.length} ${entityType} entities`);\n                    } else {\n                        results.push(`No ${entityType} entities to clear`);\n                    }\n                } catch (error) {\n                    const errorMsg = `Failed to clear ${entityType}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[ResetDataWorkflow] ‚ùå ${errorMsg}`);\n                }\n            }\n        } catch (error) {\n            const errorMsg = `Failed to clear entity data: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ResetDataWorkflow] ‚ùå ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Clear all links from KV\r\n   */ static async clearAllLinks(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83D\\uDD17 Clearing all links...\");\n            // Get all link IDs\n            const linksIndexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"links\");\n            const linkIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(linksIndexKey);\n            if (linkIds.length > 0) {\n                // Delete all link data\n                const linkKeys = linkIds.map((id)=>`links:link:${id}`);\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(...linkKeys);\n                // Clear the links index\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(linksIndexKey);\n                // Clear all entity-specific link indexes\n                const entityTypes = [\n                    \"tasks\",\n                    \"items\",\n                    \"sales\",\n                    \"financials\",\n                    \"characters\",\n                    \"players\",\n                    \"sites\"\n                ];\n                for (const entityType of entityTypes){\n                    const entityLinkIndexPattern = `index:links:by-entity:${entityType}:*`;\n                    const entityLinkKeys = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.keys(entityLinkIndexPattern);\n                    if (entityLinkKeys.length > 0) {\n                        await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(...entityLinkKeys);\n                    }\n                }\n                results.push(`Cleared ${linkIds.length} links`);\n                console.log(`[ResetDataWorkflow] ‚úÖ Cleared ${linkIds.length} links`);\n            } else {\n                results.push(\"No links to clear\");\n            }\n        } catch (error) {\n            const errorMsg = `Failed to clear links: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ResetDataWorkflow] ‚ùå ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Clear all logs from KV\r\n   */ static async clearAllLogs(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83D\\uDCDD Clearing all logs...\");\n            const logTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\",\n                \"links\"\n            ];\n            for (const logType of logTypes){\n                try {\n                    const logKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildLogKey)(logType);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(logKey);\n                    results.push(`Cleared ${logType} logs`);\n                } catch (error) {\n                    const errorMsg = `Failed to clear ${logType} logs: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[ResetDataWorkflow] ‚ùå ${errorMsg}`);\n                }\n            }\n        } catch (error) {\n            const errorMsg = `Failed to clear logs: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ResetDataWorkflow] ‚ùå ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Seed default sites\r\n   */ static async seedDefaultSites(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83C\\uDF31 Seeding default sites...\");\n            const defaultSites = [\n                {\n                    id: \"home\",\n                    name: \"Home\",\n                    type: \"physical\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Uvita\",\n                        location: {\n                            lat: 9.1500,\n                            lng: -83.7500\n                        }\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"feria-box\",\n                    name: \"Feria Box\",\n                    type: \"physical\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Uvita\",\n                        location: {\n                            lat: 9.1500,\n                            lng: -83.7500\n                        }\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"digital-space\",\n                    name: \"Digital Space\",\n                    type: \"cloud\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Cloud\",\n                        location: null\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                }\n            ];\n            for (const site of defaultSites){\n                try {\n                    const dataKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(\"sites\", site.id);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.set(dataKey, JSON.stringify(site));\n                    // Add to sites index\n                    const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"sites\");\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.sadd(indexKey, site.id);\n                    results.push(`Seeded site: ${site.name}`);\n                } catch (error) {\n                    const errorMsg = `Failed to seed site ${site.name}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[ResetDataWorkflow] ‚ùå ${errorMsg}`);\n                }\n            }\n            console.log(\"[ResetDataWorkflow] ‚úÖ Seeded default sites\");\n        } catch (error) {\n            const errorMsg = `Failed to seed default sites: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ResetDataWorkflow] ‚ùå ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Execute client-side reset for localhost (localStorage)\r\n   */ static async executeClientSideReset(mode, results, errors) {\n        try {\n            console.log(`[ResetDataWorkflow] üñ•Ô∏è Starting client-side reset (mode: ${mode})...`);\n            // Clear localStorage data\n            const keysToRemove = [];\n            // Find all data keys in localStorage\n            for(let i = 0; i < localStorage.length; i++){\n                const key = localStorage.key(i);\n                if (key && (key.startsWith(\"data:\") || key.startsWith(\"index:\") || key.startsWith(\"links:\") || key.startsWith(\"log:\") || key.startsWith(\"akiles:\"))) {\n                    keysToRemove.push(key);\n                }\n            }\n            // Remove all found keys\n            keysToRemove.forEach((key)=>{\n                localStorage.removeItem(key);\n                results.push(`Removed localStorage key: ${key}`);\n            });\n            // Seed default sites if in defaults mode\n            if (mode === \"defaults\") {\n                await this.seedDefaultSitesLocal(results, errors);\n            }\n            // Clear any cached data\n            if (\"caches\" in window) {\n                try {\n                    const cacheNames = await caches.keys();\n                    for (const cacheName of cacheNames){\n                        await caches.delete(cacheName);\n                        results.push(`Cleared cache: ${cacheName}`);\n                    }\n                } catch (cacheError) {\n                    console.warn(\"[ResetDataWorkflow] Cache clearing failed:\", cacheError);\n                }\n            }\n            console.log(`[ResetDataWorkflow] ‚úÖ Client-side reset completed: ${results.length} operations`);\n            return {\n                success: errors.length === 0,\n                message: `Client-side reset completed (${mode} mode) - ${results.length} operations completed`,\n                data: {\n                    results,\n                    errors,\n                    mode,\n                    environment: \"local\"\n                }\n            };\n        } catch (error) {\n            const errorMsg = `Client-side reset failed: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ResetDataWorkflow] ‚ùå ${errorMsg}`);\n            return {\n                success: false,\n                message: errorMsg,\n                data: {\n                    results: [],\n                    errors,\n                    mode,\n                    environment: \"local\"\n                }\n            };\n        }\n    }\n    /**\r\n   * Seed default sites for localhost (localStorage)\r\n   */ static async seedDefaultSitesLocal(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83C\\uDF31 Seeding default sites for localhost...\");\n            const defaultSites = [\n                {\n                    id: \"home\",\n                    name: \"Home\",\n                    type: \"physical\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Uvita\",\n                        location: {\n                            lat: 9.1500,\n                            lng: -83.7500\n                        }\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"feria-box\",\n                    name: \"Feria Box\",\n                    type: \"physical\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Uvita\",\n                        location: {\n                            lat: 9.1500,\n                            lng: -83.7500\n                        }\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"digital-space\",\n                    name: \"Digital Space\",\n                    type: \"cloud\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Cloud\",\n                        location: null\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                }\n            ];\n            for (const site of defaultSites){\n                try {\n                    // Store site data\n                    const dataKey = `data:sites:${site.id}`;\n                    localStorage.setItem(dataKey, JSON.stringify(site));\n                    // Add to sites index\n                    const indexKey = \"index:sites\";\n                    const existingIndex = localStorage.getItem(indexKey);\n                    const indexSet = new Set(existingIndex ? JSON.parse(existingIndex) : []);\n                    indexSet.add(site.id);\n                    localStorage.setItem(indexKey, JSON.stringify([\n                        ...indexSet\n                    ]));\n                    results.push(`Seeded localStorage site: ${site.name}`);\n                } catch (error) {\n                    const errorMsg = `Failed to seed localStorage site ${site.name}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[ResetDataWorkflow] ‚ùå ${errorMsg}`);\n                }\n            }\n            console.log(\"[ResetDataWorkflow] ‚úÖ Seeded default sites for localhost\");\n        } catch (error) {\n            const errorMsg = `Failed to seed default sites for localhost: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ResetDataWorkflow] ‚ùå ${errorMsg}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./workflows/settings/reset-data-workflow.ts\n");

/***/ })

};
;