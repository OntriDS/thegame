"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/settings/route";
exports.ids = ["app/api/settings/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:buffer");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsettings%2Froute&page=%2Fapi%2Fsettings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsettings%2Froute.ts&appDir=C%3A%5CUsers%5CUsuario%5CAKILES%5CGAME%20WEB%20APP%5CSPLIT%5Cthegame%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CUsuario%5CAKILES%5CGAME%20WEB%20APP%5CSPLIT%5Cthegame&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsettings%2Froute&page=%2Fapi%2Fsettings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsettings%2Froute.ts&appDir=C%3A%5CUsers%5CUsuario%5CAKILES%5CGAME%20WEB%20APP%5CSPLIT%5Cthegame%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CUsuario%5CAKILES%5CGAME%20WEB%20APP%5CSPLIT%5Cthegame&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Usuario_AKILES_GAME_WEB_APP_SPLIT_thegame_app_api_settings_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/settings/route.ts */ \"(rsc)/./app/api/settings/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/settings/route\",\n        pathname: \"/api/settings\",\n        filename: \"route\",\n        bundlePath: \"app/api/settings/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Usuario\\\\AKILES\\\\GAME WEB APP\\\\SPLIT\\\\thegame\\\\app\\\\api\\\\settings\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Usuario_AKILES_GAME_WEB_APP_SPLIT_thegame_app_api_settings_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/settings/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZzZXR0aW5ncyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGc2V0dGluZ3MlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZzZXR0aW5ncyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNVc3VhcmlvJTVDQUtJTEVTJTVDR0FNRSUyMFdFQiUyMEFQUCU1Q1NQTElUJTVDdGhlZ2FtZSU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDVXN1YXJpbyU1Q0FLSUxFUyU1Q0dBTUUlMjBXRUIlMjBBUFAlNUNTUExJVCU1Q3RoZWdhbWUmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3NDO0FBQ25IO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZ2FtZS1hZG1pbi8/ODk4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxVc3VhcmlvXFxcXEFLSUxFU1xcXFxHQU1FIFdFQiBBUFBcXFxcU1BMSVRcXFxcdGhlZ2FtZVxcXFxhcHBcXFxcYXBpXFxcXHNldHRpbmdzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9zZXR0aW5ncy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3NldHRpbmdzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9zZXR0aW5ncy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXFVzdWFyaW9cXFxcQUtJTEVTXFxcXEdBTUUgV0VCIEFQUFxcXFxTUExJVFxcXFx0aGVnYW1lXFxcXGFwcFxcXFxhcGlcXFxcc2V0dGluZ3NcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3NldHRpbmdzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsettings%2Froute&page=%2Fapi%2Fsettings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsettings%2Froute.ts&appDir=C%3A%5CUsers%5CUsuario%5CAKILES%5CGAME%20WEB%20APP%5CSPLIT%5Cthegame%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CUsuario%5CAKILES%5CGAME%20WEB%20APP%5CSPLIT%5Cthegame&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/settings/route.ts":
/*!***********************************!*\
  !*** ./app/api/settings/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_api_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/api-auth */ \"(rsc)/./lib/api-auth.ts\");\n/* harmony import */ var _workflows_settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/workflows/settings */ \"(rsc)/./workflows/settings/index.ts\");\n// app/api/settings/route.ts\n\n\n\nasync function POST(request) {\n    if (!await (0,_lib_api_auth__WEBPACK_IMPORTED_MODULE_1__.requireAdminAuth)(request)) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Unauthorized\"\n        }, {\n            status: 401\n        });\n    }\n    try {\n        const { action, parameters } = await request.json();\n        switch(action){\n            case \"clear-logs\":\n                return await _workflows_settings__WEBPACK_IMPORTED_MODULE_2__.ClearLogsWorkflow.execute();\n            case \"reset-data\":\n                return await _workflows_settings__WEBPACK_IMPORTED_MODULE_2__.ResetDataWorkflow.execute(parameters?.mode || \"defaults\");\n            case \"clear-cache\":\n                return await _workflows_settings__WEBPACK_IMPORTED_MODULE_2__.ClearCacheWorkflow.execute();\n            case \"backfill-logs\":\n                return await _workflows_settings__WEBPACK_IMPORTED_MODULE_2__.BackfillLogsWorkflow.execute();\n            case \"seed-data\":\n                return await _workflows_settings__WEBPACK_IMPORTED_MODULE_2__.SeedDataWorkflow.execute(parameters?.source || \"constants\");\n            case \"export-data\":\n                return await _workflows_settings__WEBPACK_IMPORTED_MODULE_2__.ExportDataWorkflow.execute();\n            case \"import-data\":\n                return await _workflows_settings__WEBPACK_IMPORTED_MODULE_2__.ImportDataWorkflow.execute(parameters?.data);\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Unknown action\"\n                }, {\n                    status: 400\n                });\n        }\n    } catch (error) {\n        console.error(\"[Settings API] Error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3NldHRpbmdzL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSw0QkFBNEI7QUFDNEI7QUFDTjtBQVNwQjtBQUV2QixlQUFlUyxLQUFLQyxPQUFvQjtJQUM3QyxJQUFJLENBQUUsTUFBTVQsK0RBQWdCQSxDQUFDUyxVQUFXO1FBQ3RDLE9BQU9WLHFEQUFZQSxDQUFDVyxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUFlLEdBQUc7WUFBRUMsUUFBUTtRQUFJO0lBQ3BFO0lBRUEsSUFBSTtRQUNGLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUUsR0FBRyxNQUFNTCxRQUFRQyxJQUFJO1FBRWpELE9BQVFHO1lBQ04sS0FBSztnQkFDSCxPQUFPLE1BQU1YLGtFQUFpQkEsQ0FBQ2EsT0FBTztZQUV4QyxLQUFLO2dCQUNILE9BQU8sTUFBTWQsa0VBQWlCQSxDQUFDYyxPQUFPLENBQUNELFlBQVlFLFFBQVE7WUFFN0QsS0FBSztnQkFDSCxPQUFPLE1BQU1iLG1FQUFrQkEsQ0FBQ1ksT0FBTztZQUV6QyxLQUFLO2dCQUNILE9BQU8sTUFBTVgscUVBQW9CQSxDQUFDVyxPQUFPO1lBRTNDLEtBQUs7Z0JBQ0gsT0FBTyxNQUFNUixpRUFBZ0JBLENBQUNRLE9BQU8sQ0FBQ0QsWUFBWUcsVUFBVTtZQUU5RCxLQUFLO2dCQUNILE9BQU8sTUFBTVosbUVBQWtCQSxDQUFDVSxPQUFPO1lBRXpDLEtBQUs7Z0JBQ0gsT0FBTyxNQUFNVCxtRUFBa0JBLENBQUNTLE9BQU8sQ0FBQ0QsWUFBWUk7WUFFdEQ7Z0JBQ0UsT0FBT25CLHFEQUFZQSxDQUFDVyxJQUFJLENBQUM7b0JBQUVDLE9BQU87Z0JBQWlCLEdBQUc7b0JBQUVDLFFBQVE7Z0JBQUk7UUFDeEU7SUFDRixFQUFFLE9BQU9ELE9BQU87UUFDZFEsUUFBUVIsS0FBSyxDQUFDLHlCQUF5QkE7UUFDdkMsT0FBT1oscURBQVlBLENBQUNXLElBQUksQ0FDdEI7WUFBRUMsT0FBTztRQUF3QixHQUNqQztZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWdhbWUtYWRtaW4vLi9hcHAvYXBpL3NldHRpbmdzL3JvdXRlLnRzPzkyYzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYXBwL2FwaS9zZXR0aW5ncy9yb3V0ZS50c1xyXG5pbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xyXG5pbXBvcnQgeyByZXF1aXJlQWRtaW5BdXRoIH0gZnJvbSAnQC9saWIvYXBpLWF1dGgnO1xyXG5pbXBvcnQgeyBcclxuICBSZXNldERhdGFXb3JrZmxvdyxcclxuICBDbGVhckxvZ3NXb3JrZmxvdyxcclxuICBDbGVhckNhY2hlV29ya2Zsb3csXHJcbiAgQmFja2ZpbGxMb2dzV29ya2Zsb3csXHJcbiAgRXhwb3J0RGF0YVdvcmtmbG93LFxyXG4gIEltcG9ydERhdGFXb3JrZmxvdyxcclxuICBTZWVkRGF0YVdvcmtmbG93XHJcbn0gZnJvbSAnQC93b3JrZmxvd3Mvc2V0dGluZ3MnO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICBpZiAoIShhd2FpdCByZXF1aXJlQWRtaW5BdXRoKHJlcXVlc3QpKSkge1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0sIHsgc3RhdHVzOiA0MDEgfSk7XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBhY3Rpb24sIHBhcmFtZXRlcnMgfSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xyXG4gICAgXHJcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xyXG4gICAgICBjYXNlICdjbGVhci1sb2dzJzpcclxuICAgICAgICByZXR1cm4gYXdhaXQgQ2xlYXJMb2dzV29ya2Zsb3cuZXhlY3V0ZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICBjYXNlICdyZXNldC1kYXRhJzpcclxuICAgICAgICByZXR1cm4gYXdhaXQgUmVzZXREYXRhV29ya2Zsb3cuZXhlY3V0ZShwYXJhbWV0ZXJzPy5tb2RlIHx8ICdkZWZhdWx0cycpO1xyXG4gICAgICAgIFxyXG4gICAgICBjYXNlICdjbGVhci1jYWNoZSc6XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IENsZWFyQ2FjaGVXb3JrZmxvdy5leGVjdXRlKCk7XHJcbiAgICAgICAgXHJcbiAgICAgIGNhc2UgJ2JhY2tmaWxsLWxvZ3MnOlxyXG4gICAgICAgIHJldHVybiBhd2FpdCBCYWNrZmlsbExvZ3NXb3JrZmxvdy5leGVjdXRlKCk7XHJcbiAgICAgICAgXHJcbiAgICAgIGNhc2UgJ3NlZWQtZGF0YSc6XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IFNlZWREYXRhV29ya2Zsb3cuZXhlY3V0ZShwYXJhbWV0ZXJzPy5zb3VyY2UgfHwgJ2NvbnN0YW50cycpO1xyXG4gICAgICAgIFxyXG4gICAgICBjYXNlICdleHBvcnQtZGF0YSc6XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IEV4cG9ydERhdGFXb3JrZmxvdy5leGVjdXRlKCk7XHJcbiAgICAgICAgXHJcbiAgICAgIGNhc2UgJ2ltcG9ydC1kYXRhJzpcclxuICAgICAgICByZXR1cm4gYXdhaXQgSW1wb3J0RGF0YVdvcmtmbG93LmV4ZWN1dGUocGFyYW1ldGVycz8uZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdVbmtub3duIGFjdGlvbicgfSwgeyBzdGF0dXM6IDQwMCB9KTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignW1NldHRpbmdzIEFQSV0gRXJyb3I6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICB7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJyZXF1aXJlQWRtaW5BdXRoIiwiUmVzZXREYXRhV29ya2Zsb3ciLCJDbGVhckxvZ3NXb3JrZmxvdyIsIkNsZWFyQ2FjaGVXb3JrZmxvdyIsIkJhY2tmaWxsTG9nc1dvcmtmbG93IiwiRXhwb3J0RGF0YVdvcmtmbG93IiwiSW1wb3J0RGF0YVdvcmtmbG93IiwiU2VlZERhdGFXb3JrZmxvdyIsIlBPU1QiLCJyZXF1ZXN0IiwianNvbiIsImVycm9yIiwic3RhdHVzIiwiYWN0aW9uIiwicGFyYW1ldGVycyIsImV4ZWN1dGUiLCJtb2RlIiwic291cmNlIiwiZGF0YSIsImNvbnNvbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/settings/route.ts\n");

/***/ }),

/***/ "(rsc)/./data-store/keys.ts":
/*!****************************!*\
  !*** ./data-store/keys.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildDataKey: () => (/* binding */ buildDataKey),\n/* harmony export */   buildEffectKey: () => (/* binding */ buildEffectKey),\n/* harmony export */   buildIndexKey: () => (/* binding */ buildIndexKey),\n/* harmony export */   buildLinkKey: () => (/* binding */ buildLinkKey),\n/* harmony export */   buildLinksIndexKey: () => (/* binding */ buildLinksIndexKey),\n/* harmony export */   buildLogKey: () => (/* binding */ buildLogKey)\n/* harmony export */ });\n// data-store/keys.ts\n// Centralized KV key builders. Keep shapes consistent across repositories.\n// Production-only system - no environment namespacing needed\nfunction buildDataKey(entity, id) {\n    return `data:${entity}:${id}`;\n}\nfunction buildIndexKey(entity) {\n    return `index:${entity}`; // set of ids\n}\nfunction buildLinksIndexKey(entityType, id) {\n    return `index:links:by-entity:${entityType}:${id}`; // set of link ids\n}\nfunction buildLinkKey(id) {\n    return `links:link:${id}`;\n}\nfunction buildEffectKey(effectKey) {\n    return `effects:${effectKey}`;\n}\nfunction buildLogKey(entity, yyyymm) {\n    return yyyymm ? `logs:${entity}:${yyyymm}` : `logs:${entity}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9kYXRhLXN0b3JlL2tleXMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEscUJBQXFCO0FBQ3JCLDJFQUEyRTtBQUMzRSw2REFBNkQ7QUFFdEQsU0FBU0EsYUFBYUMsTUFBYyxFQUFFQyxFQUFVO0lBQ3JELE9BQU8sQ0FBQyxLQUFLLEVBQUVELE9BQU8sQ0FBQyxFQUFFQyxHQUFHLENBQUM7QUFDL0I7QUFFTyxTQUFTQyxjQUFjRixNQUFjO0lBQzFDLE9BQU8sQ0FBQyxNQUFNLEVBQUVBLE9BQU8sQ0FBQyxFQUFFLGFBQWE7QUFDekM7QUFFTyxTQUFTRyxtQkFBbUJDLFVBQWtCLEVBQUVILEVBQVU7SUFDL0QsT0FBTyxDQUFDLHNCQUFzQixFQUFFRyxXQUFXLENBQUMsRUFBRUgsR0FBRyxDQUFDLEVBQUUsa0JBQWtCO0FBQ3hFO0FBRU8sU0FBU0ksYUFBYUosRUFBVTtJQUNyQyxPQUFPLENBQUMsV0FBVyxFQUFFQSxHQUFHLENBQUM7QUFDM0I7QUFFTyxTQUFTSyxlQUFlQyxTQUFpQjtJQUM5QyxPQUFPLENBQUMsUUFBUSxFQUFFQSxVQUFVLENBQUM7QUFDL0I7QUFFTyxTQUFTQyxZQUFZUixNQUFjLEVBQUVTLE1BQWU7SUFDekQsT0FBT0EsU0FDSCxDQUFDLEtBQUssRUFBRVQsT0FBTyxDQUFDLEVBQUVTLE9BQU8sQ0FBQyxHQUMxQixDQUFDLEtBQUssRUFBRVQsT0FBTyxDQUFDO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZ2FtZS1hZG1pbi8uL2RhdGEtc3RvcmUva2V5cy50cz83MGUyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGRhdGEtc3RvcmUva2V5cy50c1xyXG4vLyBDZW50cmFsaXplZCBLViBrZXkgYnVpbGRlcnMuIEtlZXAgc2hhcGVzIGNvbnNpc3RlbnQgYWNyb3NzIHJlcG9zaXRvcmllcy5cclxuLy8gUHJvZHVjdGlvbi1vbmx5IHN5c3RlbSAtIG5vIGVudmlyb25tZW50IG5hbWVzcGFjaW5nIG5lZWRlZFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGF0YUtleShlbnRpdHk6IHN0cmluZywgaWQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBkYXRhOiR7ZW50aXR5fToke2lkfWA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBidWlsZEluZGV4S2V5KGVudGl0eTogc3RyaW5nKTogc3RyaW5nIHtcclxuICByZXR1cm4gYGluZGV4OiR7ZW50aXR5fWA7IC8vIHNldCBvZiBpZHNcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTGlua3NJbmRleEtleShlbnRpdHlUeXBlOiBzdHJpbmcsIGlkOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiBgaW5kZXg6bGlua3M6YnktZW50aXR5OiR7ZW50aXR5VHlwZX06JHtpZH1gOyAvLyBzZXQgb2YgbGluayBpZHNcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTGlua0tleShpZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICByZXR1cm4gYGxpbmtzOmxpbms6JHtpZH1gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRFZmZlY3RLZXkoZWZmZWN0S2V5OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiBgZWZmZWN0czoke2VmZmVjdEtleX1gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRMb2dLZXkoZW50aXR5OiBzdHJpbmcsIHl5eXltbT86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIHl5eXltbVxyXG4gICAgPyBgbG9nczoke2VudGl0eX06JHt5eXl5bW19YFxyXG4gICAgOiBgbG9nczoke2VudGl0eX1gO1xyXG59XHJcblxyXG5cclxuIl0sIm5hbWVzIjpbImJ1aWxkRGF0YUtleSIsImVudGl0eSIsImlkIiwiYnVpbGRJbmRleEtleSIsImJ1aWxkTGlua3NJbmRleEtleSIsImVudGl0eVR5cGUiLCJidWlsZExpbmtLZXkiLCJidWlsZEVmZmVjdEtleSIsImVmZmVjdEtleSIsImJ1aWxkTG9nS2V5IiwieXl5eW1tIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./data-store/keys.ts\n");

/***/ }),

/***/ "(rsc)/./lib/api-auth.ts":
/*!*************************!*\
  !*** ./lib/api-auth.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requireAdminAuth: () => (/* binding */ requireAdminAuth)\n/* harmony export */ });\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./auth */ \"(rsc)/./lib/auth.ts\");\n// lib/api-auth.ts\n// API Authentication Utility for protecting API routes\n// Ensures only authenticated admin users can access API endpoints\n\n/**\r\n * Require admin authentication for API routes\r\n * Returns true if user is authenticated, false otherwise\r\n */ async function requireAdminAuth(req) {\n    try {\n        // Get the admin session token from cookies\n        const token = req.cookies.get(\"admin_session\")?.value;\n        // Get the JWT secret from environment variables\n        const secret = process.env.ADMIN_SESSION_SECRET || \"\";\n        // If no token or secret, user is not authenticated\n        if (!token || !secret) {\n            console.log(\"[API Auth] No token or secret found\");\n            return false;\n        }\n        // Verify the JWT token\n        const verified = await (0,_auth__WEBPACK_IMPORTED_MODULE_0__.verifyJwt)(token, secret);\n        if (verified.valid) {\n            // console.log('[API Auth] User authenticated successfully'); // Disabled to reduce log spam\n            return true;\n        } else {\n            console.log(\"[API Auth] Invalid token:\", verified.reason);\n            return false;\n        }\n    } catch (error) {\n        console.error(\"[API Auth] Error verifying authentication:\", error);\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYXBpLWF1dGgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrQkFBa0I7QUFDbEIsdURBQXVEO0FBQ3ZELGtFQUFrRTtBQUcvQjtBQUVuQzs7O0NBR0MsR0FDTSxlQUFlQyxpQkFBaUJDLEdBQWdCO0lBQ3JELElBQUk7UUFDRiwyQ0FBMkM7UUFDM0MsTUFBTUMsUUFBUUQsSUFBSUUsT0FBTyxDQUFDQyxHQUFHLENBQUMsa0JBQWtCQztRQUVoRCxnREFBZ0Q7UUFDaEQsTUFBTUMsU0FBU0MsUUFBUUMsR0FBRyxDQUFDQyxvQkFBb0IsSUFBSTtRQUVuRCxtREFBbUQ7UUFDbkQsSUFBSSxDQUFDUCxTQUFTLENBQUNJLFFBQVE7WUFDckJJLFFBQVFDLEdBQUcsQ0FBQztZQUNaLE9BQU87UUFDVDtRQUVBLHVCQUF1QjtRQUN2QixNQUFNQyxXQUFXLE1BQU1iLGdEQUFTQSxDQUFDRyxPQUFPSTtRQUV4QyxJQUFJTSxTQUFTQyxLQUFLLEVBQUU7WUFDbEIsNEZBQTRGO1lBQzVGLE9BQU87UUFDVCxPQUFPO1lBQ0xILFFBQVFDLEdBQUcsQ0FBQyw2QkFBNkJDLFNBQVNFLE1BQU07WUFDeEQsT0FBTztRQUNUO0lBQ0YsRUFBRSxPQUFPQyxPQUFPO1FBQ2RMLFFBQVFLLEtBQUssQ0FBQyw4Q0FBOENBO1FBQzVELE9BQU87SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZ2FtZS1hZG1pbi8uL2xpYi9hcGktYXV0aC50cz9iMzBlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYi9hcGktYXV0aC50c1xyXG4vLyBBUEkgQXV0aGVudGljYXRpb24gVXRpbGl0eSBmb3IgcHJvdGVjdGluZyBBUEkgcm91dGVzXHJcbi8vIEVuc3VyZXMgb25seSBhdXRoZW50aWNhdGVkIGFkbWluIHVzZXJzIGNhbiBhY2Nlc3MgQVBJIGVuZHBvaW50c1xyXG5cclxuaW1wb3J0IHsgTmV4dFJlcXVlc3QgfSBmcm9tICduZXh0L3NlcnZlcic7XHJcbmltcG9ydCB7IHZlcmlmeUp3dCB9IGZyb20gJy4vYXV0aCc7XHJcblxyXG4vKipcclxuICogUmVxdWlyZSBhZG1pbiBhdXRoZW50aWNhdGlvbiBmb3IgQVBJIHJvdXRlc1xyXG4gKiBSZXR1cm5zIHRydWUgaWYgdXNlciBpcyBhdXRoZW50aWNhdGVkLCBmYWxzZSBvdGhlcndpc2VcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1aXJlQWRtaW5BdXRoKHJlcTogTmV4dFJlcXVlc3QpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICB0cnkge1xyXG4gICAgLy8gR2V0IHRoZSBhZG1pbiBzZXNzaW9uIHRva2VuIGZyb20gY29va2llc1xyXG4gICAgY29uc3QgdG9rZW4gPSByZXEuY29va2llcy5nZXQoJ2FkbWluX3Nlc3Npb24nKT8udmFsdWU7XHJcbiAgICBcclxuICAgIC8vIEdldCB0aGUgSldUIHNlY3JldCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlc1xyXG4gICAgY29uc3Qgc2VjcmV0ID0gcHJvY2Vzcy5lbnYuQURNSU5fU0VTU0lPTl9TRUNSRVQgfHwgJyc7XHJcbiAgICBcclxuICAgIC8vIElmIG5vIHRva2VuIG9yIHNlY3JldCwgdXNlciBpcyBub3QgYXV0aGVudGljYXRlZFxyXG4gICAgaWYgKCF0b2tlbiB8fCAhc2VjcmV0KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdbQVBJIEF1dGhdIE5vIHRva2VuIG9yIHNlY3JldCBmb3VuZCcpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFZlcmlmeSB0aGUgSldUIHRva2VuXHJcbiAgICBjb25zdCB2ZXJpZmllZCA9IGF3YWl0IHZlcmlmeUp3dCh0b2tlbiwgc2VjcmV0KTtcclxuICAgIFxyXG4gICAgaWYgKHZlcmlmaWVkLnZhbGlkKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdbQVBJIEF1dGhdIFVzZXIgYXV0aGVudGljYXRlZCBzdWNjZXNzZnVsbHknKTsgLy8gRGlzYWJsZWQgdG8gcmVkdWNlIGxvZyBzcGFtXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coJ1tBUEkgQXV0aF0gSW52YWxpZCB0b2tlbjonLCB2ZXJpZmllZC5yZWFzb24pO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1tBUEkgQXV0aF0gRXJyb3IgdmVyaWZ5aW5nIGF1dGhlbnRpY2F0aW9uOicsIGVycm9yKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcblxyXG4iXSwibmFtZXMiOlsidmVyaWZ5Snd0IiwicmVxdWlyZUFkbWluQXV0aCIsInJlcSIsInRva2VuIiwiY29va2llcyIsImdldCIsInZhbHVlIiwic2VjcmV0IiwicHJvY2VzcyIsImVudiIsIkFETUlOX1NFU1NJT05fU0VDUkVUIiwiY29uc29sZSIsImxvZyIsInZlcmlmaWVkIiwidmFsaWQiLCJyZWFzb24iLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/api-auth.ts\n");

/***/ }),

/***/ "(rsc)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateJwt: () => (/* binding */ generateJwt),\n/* harmony export */   getRequiredEnv: () => (/* binding */ getRequiredEnv),\n/* harmony export */   verifyJwt: () => (/* binding */ verifyJwt)\n/* harmony export */ });\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/jwt/sign.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/jwt/verify.js\");\n// lib/auth.ts\n// JWT (HS256) utilities for Node runtime (route handlers)\n\nfunction toUint8Array(input) {\n    return new TextEncoder().encode(input);\n}\nasync function generateJwt(claims, secret, expiresInSeconds) {\n    const key = toUint8Array(secret);\n    const nowSeconds = Math.floor(Date.now() / 1000);\n    return await new jose__WEBPACK_IMPORTED_MODULE_0__.SignJWT({\n        ...claims\n    }).setProtectedHeader({\n        alg: \"HS256\"\n    }).setIssuedAt(nowSeconds).setExpirationTime(nowSeconds + expiresInSeconds).sign(key);\n}\nasync function verifyJwt(token, secret) {\n    try {\n        const key = toUint8Array(secret);\n        const { payload } = await (0,jose__WEBPACK_IMPORTED_MODULE_1__.jwtVerify)(token, key);\n        return {\n            valid: true,\n            payload: payload\n        };\n    } catch (_e) {\n        return {\n            valid: false,\n            reason: \"error\"\n        };\n    }\n}\nfunction getRequiredEnv(name) {\n    const value = process.env[name];\n    if (!value || value.trim() === \"\") {\n        throw new Error(`${name} is not set. Add it to .env.local and Vercel project settings.`);\n    }\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYXV0aC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLGNBQWM7QUFDZCwwREFBMEQ7QUFDaEI7QUFVMUMsU0FBU0UsYUFBYUMsS0FBYTtJQUNqQyxPQUFPLElBQUlDLGNBQWNDLE1BQU0sQ0FBQ0Y7QUFDbEM7QUFFTyxlQUFlRyxZQUFZQyxNQUFzQyxFQUFFQyxNQUFjLEVBQUVDLGdCQUF3QjtJQUNoSCxNQUFNQyxNQUFNUixhQUFhTTtJQUN6QixNQUFNRyxhQUFhQyxLQUFLQyxLQUFLLENBQUNDLEtBQUtDLEdBQUcsS0FBSztJQUMzQyxPQUFPLE1BQU0sSUFBSWYseUNBQU9BLENBQUM7UUFBRSxHQUFHTyxNQUFNO0lBQUMsR0FDbENTLGtCQUFrQixDQUFDO1FBQUVDLEtBQUs7SUFBUSxHQUNsQ0MsV0FBVyxDQUFDUCxZQUNaUSxpQkFBaUIsQ0FBQ1IsYUFBYUYsa0JBQy9CVyxJQUFJLENBQUNWO0FBQ1Y7QUFFTyxlQUFlVyxVQUFVQyxLQUFhLEVBQUVkLE1BQWM7SUFDM0QsSUFBSTtRQUNGLE1BQU1FLE1BQU1SLGFBQWFNO1FBQ3pCLE1BQU0sRUFBRWUsT0FBTyxFQUFFLEdBQUcsTUFBTXRCLCtDQUFTQSxDQUFDcUIsT0FBT1o7UUFDM0MsT0FBTztZQUFFYyxPQUFPO1lBQU1ELFNBQVNBO1FBQWdDO0lBQ2pFLEVBQUUsT0FBT0UsSUFBSTtRQUNYLE9BQU87WUFBRUQsT0FBTztZQUFPRSxRQUFRO1FBQVE7SUFDekM7QUFDRjtBQUVPLFNBQVNDLGVBQWVDLElBQVk7SUFDekMsTUFBTUMsUUFBUUMsUUFBUUMsR0FBRyxDQUFDSCxLQUFLO0lBQy9CLElBQUksQ0FBQ0MsU0FBU0EsTUFBTUcsSUFBSSxPQUFPLElBQUk7UUFDakMsTUFBTSxJQUFJQyxNQUFNLENBQUMsRUFBRUwsS0FBSyw4REFBOEQsQ0FBQztJQUN6RjtJQUNBLE9BQU9DO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVnYW1lLWFkbWluLy4vbGliL2F1dGgudHM/YmY3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWIvYXV0aC50c1xyXG4vLyBKV1QgKEhTMjU2KSB1dGlsaXRpZXMgZm9yIE5vZGUgcnVudGltZSAocm91dGUgaGFuZGxlcnMpXHJcbmltcG9ydCB7IFNpZ25KV1QsIGp3dFZlcmlmeSB9IGZyb20gJ2pvc2UnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBKd3RDbGFpbXMge1xyXG4gIHN1Yjogc3RyaW5nO1xyXG4gIHJvbGU6IHN0cmluZztcclxuICBpYXQ6IG51bWJlcjsgLy8gaXNzdWVkIGF0IChzZWNvbmRzIHNpbmNlIGVwb2NoKVxyXG4gIGV4cDogbnVtYmVyOyAvLyBleHBpcnkgKHNlY29uZHMgc2luY2UgZXBvY2gpXHJcbiAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcclxufVxyXG5cclxuZnVuY3Rpb24gdG9VaW50OEFycmF5KGlucHV0OiBzdHJpbmcpOiBVaW50OEFycmF5IHtcclxuICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGlucHV0KTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlSnd0KGNsYWltczogT21pdDxKd3RDbGFpbXMsICdpYXQnIHwgJ2V4cCc+LCBzZWNyZXQ6IHN0cmluZywgZXhwaXJlc0luU2Vjb25kczogbnVtYmVyKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICBjb25zdCBrZXkgPSB0b1VpbnQ4QXJyYXkoc2VjcmV0KTtcclxuICBjb25zdCBub3dTZWNvbmRzID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XHJcbiAgcmV0dXJuIGF3YWl0IG5ldyBTaWduSldUKHsgLi4uY2xhaW1zIH0pXHJcbiAgICAuc2V0UHJvdGVjdGVkSGVhZGVyKHsgYWxnOiAnSFMyNTYnIH0pXHJcbiAgICAuc2V0SXNzdWVkQXQobm93U2Vjb25kcylcclxuICAgIC5zZXRFeHBpcmF0aW9uVGltZShub3dTZWNvbmRzICsgZXhwaXJlc0luU2Vjb25kcylcclxuICAgIC5zaWduKGtleSk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlKd3QodG9rZW46IHN0cmluZywgc2VjcmV0OiBzdHJpbmcpOiBQcm9taXNlPHsgdmFsaWQ6IGJvb2xlYW47IHBheWxvYWQ/OiBKd3RDbGFpbXM7IHJlYXNvbj86IHN0cmluZyB9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGtleSA9IHRvVWludDhBcnJheShzZWNyZXQpO1xyXG4gICAgY29uc3QgeyBwYXlsb2FkIH0gPSBhd2FpdCBqd3RWZXJpZnkodG9rZW4sIGtleSk7XHJcbiAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgcGF5bG9hZDogcGF5bG9hZCBhcyB1bmtub3duIGFzIEp3dENsYWltcyB9O1xyXG4gIH0gY2F0Y2ggKF9lKSB7XHJcbiAgICByZXR1cm4geyB2YWxpZDogZmFsc2UsIHJlYXNvbjogJ2Vycm9yJyB9O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlcXVpcmVkRW52KG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgY29uc3QgdmFsdWUgPSBwcm9jZXNzLmVudltuYW1lXTtcclxuICBpZiAoIXZhbHVlIHx8IHZhbHVlLnRyaW0oKSA9PT0gJycpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgJHtuYW1lfSBpcyBub3Qgc2V0LiBBZGQgaXQgdG8gLmVudi5sb2NhbCBhbmQgVmVyY2VsIHByb2plY3Qgc2V0dGluZ3MuYCk7XHJcbiAgfVxyXG4gIHJldHVybiB2YWx1ZTtcclxufVxyXG4iXSwibmFtZXMiOlsiU2lnbkpXVCIsImp3dFZlcmlmeSIsInRvVWludDhBcnJheSIsImlucHV0IiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJnZW5lcmF0ZUp3dCIsImNsYWltcyIsInNlY3JldCIsImV4cGlyZXNJblNlY29uZHMiLCJrZXkiLCJub3dTZWNvbmRzIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsInNldFByb3RlY3RlZEhlYWRlciIsImFsZyIsInNldElzc3VlZEF0Iiwic2V0RXhwaXJhdGlvblRpbWUiLCJzaWduIiwidmVyaWZ5Snd0IiwidG9rZW4iLCJwYXlsb2FkIiwidmFsaWQiLCJfZSIsInJlYXNvbiIsImdldFJlcXVpcmVkRW52IiwibmFtZSIsInZhbHVlIiwicHJvY2VzcyIsImVudiIsInRyaW0iLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/auth.ts\n");

/***/ }),

/***/ "(rsc)/./workflows/settings/backfill-logs-workflow.ts":
/*!******************************************************!*\
  !*** ./workflows/settings/backfill-logs-workflow.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BackfillLogsWorkflow: () => (/* binding */ BackfillLogsWorkflow)\n/* harmony export */ });\n/* harmony import */ var _vercel_kv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/kv */ \"(rsc)/./node_modules/@vercel/kv/dist/index.js\");\n/* harmony import */ var _data_store_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/data-store/keys */ \"(rsc)/./data-store/keys.ts\");\n// workflows/settings/backfill-logs-workflow.ts\n// Backfill Logs Workflow for KV-only architecture\n\n\nclass BackfillLogsWorkflow {\n    /**\r\n   * Execute backfill logs operation\r\n   */ static async execute() {\n        try {\n            console.log(\"[BackfillLogsWorkflow] \\uD83D\\uDD04 Starting backfill logs operation...\");\n            const isKV = Boolean(process.env.KV_REST_API_URL);\n            const isServer = \"undefined\" === \"undefined\";\n            const results = [];\n            const errors = [];\n            console.log(`[BackfillLogsWorkflow] 🌍 Environment: ${isKV ? \"KV (Production)\" : \"Local (Development)\"}`);\n            console.log(`[BackfillLogsWorkflow] 🖥️ Context: ${isServer ? \"Server\" : \"Client\"}`);\n            // For local environment, we need to run on client side\n            if (!isKV && isServer) {\n                console.log(`[BackfillLogsWorkflow] ⚠️ Local environment detected on server - returning instruction for client-side execution`);\n                return {\n                    success: true,\n                    message: \"Backfill logs requires client-side execution for local environment\",\n                    data: {\n                        results: [\n                            \"Client-side backfill logs required for local environment\"\n                        ],\n                        errors: [],\n                        operation: \"backfill-logs\",\n                        environment: \"local\",\n                        requiresClientExecution: true\n                    }\n                };\n            }\n            // Backfill logs for all entity types\n            await this.backfillEntityLogs(results, errors);\n            const success = errors.length === 0;\n            const message = success ? `Successfully backfilled logs - ${results.length} operations completed` : `Backfill logs completed with ${errors.length} errors - ${results.length} operations completed`;\n            console.log(`[BackfillLogsWorkflow] ✅ Backfill logs operation completed: ${message}`);\n            return {\n                success,\n                message,\n                data: {\n                    results,\n                    errors,\n                    operation: \"backfill-logs\",\n                    environment: isKV ? \"kv\" : \"local\"\n                }\n            };\n        } catch (error) {\n            console.error(\"[BackfillLogsWorkflow] ❌ Backfill logs operation failed:\", error);\n            return {\n                success: false,\n                message: `Backfill logs operation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                data: {\n                    results: [],\n                    errors: [\n                        error instanceof Error ? error.message : \"Unknown error\"\n                    ],\n                    operation: \"backfill-logs\",\n                    environment: \"unknown\"\n                }\n            };\n        }\n    }\n    /**\r\n   * Backfill logs for all entity types\r\n   */ static async backfillEntityLogs(results, errors) {\n        try {\n            console.log(\"[BackfillLogsWorkflow] \\uD83D\\uDCDD Backfilling entity logs...\");\n            const entityTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\"\n            ];\n            for (const entityType of entityTypes){\n                try {\n                    await this.backfillEntityTypeLogs(entityType, results, errors);\n                } catch (error) {\n                    const errorMsg = `Failed to backfill ${entityType} logs: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[BackfillLogsWorkflow] ❌ ${errorMsg}`);\n                }\n            }\n        } catch (error) {\n            const errorMsg = `Failed to backfill entity logs: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[BackfillLogsWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Backfill logs for a specific entity type\r\n   */ static async backfillEntityTypeLogs(entityType, results, errors) {\n        try {\n            // Get all entity IDs from index\n            const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(entityType);\n            const entityIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(indexKey);\n            if (entityIds.length === 0) {\n                results.push(`No ${entityType} entities to backfill logs for`);\n                return;\n            }\n            // Clear existing logs for this entity type\n            const logKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildLogKey)(entityType);\n            await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(logKey);\n            // Create initial log entry\n            const initialLogEntry = {\n                timestamp: new Date().toISOString(),\n                level: \"info\",\n                message: `Backfilled logs for ${entityType}`,\n                entityType,\n                operation: \"backfill\",\n                details: {\n                    entityCount: entityIds.length,\n                    backfilledAt: new Date().toISOString()\n                }\n            };\n            await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.lpush(logKey, JSON.stringify(initialLogEntry));\n            // For each entity, create a log entry\n            let loggedEntities = 0;\n            for (const entityId of entityIds){\n                try {\n                    const dataKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(entityType, entityId);\n                    const entityData = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.get(dataKey);\n                    if (entityData) {\n                        const entity = JSON.parse(entityData);\n                        const logEntry = {\n                            timestamp: entity.createdAt || new Date().toISOString(),\n                            level: \"info\",\n                            message: `${entityType} created`,\n                            entityType,\n                            entityId,\n                            operation: \"created\",\n                            details: {\n                                name: entity.name || \"Unknown\",\n                                status: entity.status || \"unknown\"\n                            }\n                        };\n                        await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.lpush(logKey, JSON.stringify(logEntry));\n                        loggedEntities++;\n                    }\n                } catch (error) {\n                    console.warn(`[BackfillLogsWorkflow] ⚠️ Failed to backfill log for ${entityType} ${entityId}:`, error);\n                }\n            }\n            results.push(`Backfilled logs for ${loggedEntities} ${entityType} entities`);\n            console.log(`[BackfillLogsWorkflow] ✅ Backfilled logs for ${loggedEntities} ${entityType} entities`);\n        } catch (error) {\n            const errorMsg = `Failed to backfill ${entityType} logs: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[BackfillLogsWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./workflows/settings/backfill-logs-workflow.ts\n");

/***/ }),

/***/ "(rsc)/./workflows/settings/clear-cache-workflow.ts":
/*!****************************************************!*\
  !*** ./workflows/settings/clear-cache-workflow.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClearCacheWorkflow: () => (/* binding */ ClearCacheWorkflow)\n/* harmony export */ });\n/* harmony import */ var _vercel_kv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vercel/kv */ \"(rsc)/./node_modules/@vercel/kv/dist/index.js\");\n// workflows/settings/clear-cache-workflow.ts\n// Clear Cache Workflow for KV-only architecture\n\nclass ClearCacheWorkflow {\n    /**\r\n   * Execute clear cache operation\r\n   */ static async execute() {\n        try {\n            console.log(\"[ClearCacheWorkflow] \\uD83D\\uDDD1️ Starting clear cache operation...\");\n            const isKV = Boolean(process.env.KV_REST_API_URL);\n            const isServer = \"undefined\" === \"undefined\";\n            const results = [];\n            const errors = [];\n            console.log(`[ClearCacheWorkflow] 🌍 Environment: ${isKV ? \"KV (Production)\" : \"Local (Development)\"}`);\n            console.log(`[ClearCacheWorkflow] 🖥️ Context: ${isServer ? \"Server\" : \"Client\"}`);\n            // For local environment, we need to run on client side\n            if (!isKV && isServer) {\n                console.log(`[ClearCacheWorkflow] ⚠️ Local environment detected on server - returning instruction for client-side execution`);\n                return {\n                    success: true,\n                    message: \"Clear cache requires client-side execution for local environment\",\n                    data: {\n                        results: [\n                            \"Client-side clear cache required for local environment\"\n                        ],\n                        errors: [],\n                        operation: \"clear-cache\",\n                        environment: \"local\",\n                        requiresClientExecution: true\n                    }\n                };\n            }\n            // Clear cache patterns\n            await this.clearCachePatterns(results, errors);\n            const success = errors.length === 0;\n            const message = success ? `Successfully cleared cache - ${results.length} operations completed` : `Clear cache completed with ${errors.length} errors - ${results.length} operations completed`;\n            console.log(`[ClearCacheWorkflow] ✅ Clear cache operation completed: ${message}`);\n            return {\n                success,\n                message,\n                data: {\n                    results,\n                    errors,\n                    operation: \"clear-cache\",\n                    environment: isKV ? \"kv\" : \"local\"\n                }\n            };\n        } catch (error) {\n            console.error(\"[ClearCacheWorkflow] ❌ Clear cache operation failed:\", error);\n            return {\n                success: false,\n                message: `Clear cache operation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                data: {\n                    results: [],\n                    errors: [\n                        error instanceof Error ? error.message : \"Unknown error\"\n                    ],\n                    operation: \"clear-cache\",\n                    environment: \"unknown\"\n                }\n            };\n        }\n    }\n    /**\r\n   * Clear cache patterns from KV\r\n   */ static async clearCachePatterns(results, errors) {\n        try {\n            console.log(\"[ClearCacheWorkflow] \\uD83D\\uDDD1️ Clearing cache patterns...\");\n            // Clear effects registry cache\n            try {\n                const effectsPattern = \"effects:*\";\n                const effectKeys = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.keys(effectsPattern);\n                if (effectKeys.length > 0) {\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.del(...effectKeys);\n                    results.push(`Cleared ${effectKeys.length} effect registry entries`);\n                    console.log(`[ClearCacheWorkflow] ✅ Cleared ${effectKeys.length} effect registry entries`);\n                } else {\n                    results.push(\"No effect registry entries to clear\");\n                }\n            } catch (error) {\n                const errorMsg = `Failed to clear effect registry: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                errors.push(errorMsg);\n                console.error(`[ClearCacheWorkflow] ❌ ${errorMsg}`);\n            }\n            // Clear any temporary cache keys\n            try {\n                const tempPattern = \"temp:*\";\n                const tempKeys = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.keys(tempPattern);\n                if (tempKeys.length > 0) {\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.del(...tempKeys);\n                    results.push(`Cleared ${tempKeys.length} temporary cache entries`);\n                    console.log(`[ClearCacheWorkflow] ✅ Cleared ${tempKeys.length} temporary cache entries`);\n                } else {\n                    results.push(\"No temporary cache entries to clear\");\n                }\n            } catch (error) {\n                const errorMsg = `Failed to clear temporary cache: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                errors.push(errorMsg);\n                console.error(`[ClearCacheWorkflow] ❌ ${errorMsg}`);\n            }\n            // Clear session cache if any\n            try {\n                const sessionPattern = \"session:*\";\n                const sessionKeys = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.keys(sessionPattern);\n                if (sessionKeys.length > 0) {\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.del(...sessionKeys);\n                    results.push(`Cleared ${sessionKeys.length} session cache entries`);\n                    console.log(`[ClearCacheWorkflow] ✅ Cleared ${sessionKeys.length} session cache entries`);\n                } else {\n                    results.push(\"No session cache entries to clear\");\n                }\n            } catch (error) {\n                const errorMsg = `Failed to clear session cache: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                errors.push(errorMsg);\n                console.error(`[ClearCacheWorkflow] ❌ ${errorMsg}`);\n            }\n        } catch (error) {\n            const errorMsg = `Failed to clear cache patterns: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ClearCacheWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./workflows/settings/clear-cache-workflow.ts\n");

/***/ }),

/***/ "(rsc)/./workflows/settings/clear-logs-workflow.ts":
/*!***************************************************!*\
  !*** ./workflows/settings/clear-logs-workflow.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClearLogsWorkflow: () => (/* binding */ ClearLogsWorkflow)\n/* harmony export */ });\n/* harmony import */ var _vercel_kv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/kv */ \"(rsc)/./node_modules/@vercel/kv/dist/index.js\");\n/* harmony import */ var _data_store_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/data-store/keys */ \"(rsc)/./data-store/keys.ts\");\n// workflows/settings/clear-logs-workflow.ts\n// Clear Logs Workflow for KV-only architecture\n\n\nclass ClearLogsWorkflow {\n    /**\r\n   * Execute clear logs operation\r\n   */ static async execute() {\n        try {\n            console.log(\"[ClearLogsWorkflow] \\uD83D\\uDDD1️ Starting clear logs operation...\");\n            const isKV = Boolean(process.env.KV_REST_API_URL);\n            const isServer = \"undefined\" === \"undefined\";\n            const results = [];\n            const errors = [];\n            console.log(`[ClearLogsWorkflow] 🌍 Environment: ${isKV ? \"KV (Production)\" : \"Local (Development)\"}`);\n            console.log(`[ClearLogsWorkflow] 🖥️ Context: ${isServer ? \"Server\" : \"Client\"}`);\n            // For local environment, we need to run on client side\n            if (!isKV && isServer) {\n                console.log(`[ClearLogsWorkflow] ⚠️ Local environment detected on server - returning instruction for client-side execution`);\n                return {\n                    success: true,\n                    message: \"Clear logs requires client-side execution for local environment\",\n                    data: {\n                        results: [\n                            \"Client-side clear logs required for local environment\"\n                        ],\n                        errors: [],\n                        operation: \"clear-logs\",\n                        environment: \"local\",\n                        requiresClientExecution: true\n                    }\n                };\n            }\n            // Clear all entity logs\n            await this.clearEntityLogs(results, errors);\n            const success = errors.length === 0;\n            const message = success ? `Successfully cleared logs - ${results.length} operations completed` : `Clear logs completed with ${errors.length} errors - ${results.length} operations completed`;\n            console.log(`[ClearLogsWorkflow] ✅ Clear logs operation completed: ${message}`);\n            return {\n                success,\n                message,\n                data: {\n                    results,\n                    errors,\n                    operation: \"clear-logs\",\n                    environment: isKV ? \"kv\" : \"local\"\n                }\n            };\n        } catch (error) {\n            console.error(\"[ClearLogsWorkflow] ❌ Clear logs operation failed:\", error);\n            return {\n                success: false,\n                message: `Clear logs operation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                data: {\n                    results: [],\n                    errors: [\n                        error instanceof Error ? error.message : \"Unknown error\"\n                    ],\n                    operation: \"clear-logs\",\n                    environment: \"unknown\"\n                }\n            };\n        }\n    }\n    /**\r\n   * Clear all entity logs from KV\r\n   */ static async clearEntityLogs(results, errors) {\n        try {\n            console.log(\"[ClearLogsWorkflow] \\uD83D\\uDCDD Clearing entity logs...\");\n            const logTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\",\n                \"links\"\n            ];\n            for (const logType of logTypes){\n                try {\n                    const logKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildLogKey)(logType);\n                    const deleted = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(logKey);\n                    if (deleted > 0) {\n                        results.push(`Cleared ${logType} logs`);\n                        console.log(`[ClearLogsWorkflow] ✅ Cleared ${logType} logs`);\n                    } else {\n                        results.push(`No ${logType} logs to clear`);\n                    }\n                } catch (error) {\n                    const errorMsg = `Failed to clear ${logType} logs: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[ClearLogsWorkflow] ❌ ${errorMsg}`);\n                }\n            }\n        } catch (error) {\n            const errorMsg = `Failed to clear entity logs: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ClearLogsWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./workflows/settings/clear-logs-workflow.ts\n");

/***/ }),

/***/ "(rsc)/./workflows/settings/export-data-workflow.ts":
/*!****************************************************!*\
  !*** ./workflows/settings/export-data-workflow.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExportDataWorkflow: () => (/* binding */ ExportDataWorkflow)\n/* harmony export */ });\n/* harmony import */ var _vercel_kv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/kv */ \"(rsc)/./node_modules/@vercel/kv/dist/index.js\");\n/* harmony import */ var _data_store_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/data-store/keys */ \"(rsc)/./data-store/keys.ts\");\n// workflows/settings/export-data-workflow.ts\n// Export Data Workflow for KV-only architecture\n\n\nclass ExportDataWorkflow {\n    /**\r\n   * Execute export data operation\r\n   */ static async execute() {\n        try {\n            console.log(\"[ExportDataWorkflow] \\uD83D\\uDCE4 Starting export data operation...\");\n            const isKV = Boolean(process.env.KV_REST_API_URL);\n            const isServer = \"undefined\" === \"undefined\";\n            const results = [];\n            const errors = [];\n            console.log(`[ExportDataWorkflow] 🌍 Environment: ${isKV ? \"KV (Production)\" : \"Local (Development)\"}`);\n            console.log(`[ExportDataWorkflow] 🖥️ Context: ${isServer ? \"Server\" : \"Client\"}`);\n            // For local environment, we need to run on client side\n            if (!isKV && isServer) {\n                console.log(`[ExportDataWorkflow] ⚠️ Local environment detected on server - returning instruction for client-side execution`);\n                return {\n                    success: true,\n                    message: \"Export data requires client-side execution for local environment\",\n                    data: {\n                        results: [\n                            \"Client-side export data required for local environment\"\n                        ],\n                        errors: [],\n                        operation: \"export-data\",\n                        environment: \"local\",\n                        requiresClientExecution: true\n                    }\n                };\n            }\n            // Export all data\n            const exportData = await this.exportAllData(results, errors);\n            const success = errors.length === 0;\n            const message = success ? `Successfully exported data - ${results.length} operations completed` : `Export data completed with ${errors.length} errors - ${results.length} operations completed`;\n            console.log(`[ExportDataWorkflow] ✅ Export data operation completed: ${message}`);\n            return {\n                success,\n                message,\n                data: {\n                    results,\n                    errors,\n                    operation: \"export-data\",\n                    environment: isKV ? \"kv\" : \"local\",\n                    exportData\n                }\n            };\n        } catch (error) {\n            console.error(\"[ExportDataWorkflow] ❌ Export data operation failed:\", error);\n            return {\n                success: false,\n                message: `Export data operation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                data: {\n                    results: [],\n                    errors: [\n                        error instanceof Error ? error.message : \"Unknown error\"\n                    ],\n                    operation: \"export-data\",\n                    environment: \"unknown\"\n                }\n            };\n        }\n    }\n    /**\r\n   * Export all data from KV\r\n   */ static async exportAllData(results, errors) {\n        try {\n            console.log(\"[ExportDataWorkflow] \\uD83D\\uDCE4 Exporting all data...\");\n            const exportData = {\n                metadata: {\n                    exportedAt: new Date().toISOString(),\n                    version: \"1.0\",\n                    environment: process.env.KV_REST_API_URL ? \"kv\" : \"local\"\n                },\n                entities: {\n                    tasks: [],\n                    items: [],\n                    sales: [],\n                    financials: [],\n                    characters: [],\n                    players: [],\n                    sites: []\n                },\n                settlements: [],\n                links: [],\n                logs: {}\n            };\n            // Export all entity types\n            const entityTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\"\n            ];\n            for (const entityType of entityTypes){\n                try {\n                    await this.exportEntityType(entityType, exportData, results, errors);\n                } catch (error) {\n                    const errorMsg = `Failed to export ${entityType}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[ExportDataWorkflow] ❌ ${errorMsg}`);\n                }\n            }\n            // Export settlements as part of sites data\n            await this.exportSettlements(exportData, results, errors);\n            // Export links\n            await this.exportLinks(exportData, results, errors);\n            // Export logs\n            await this.exportLogs(exportData, results, errors);\n            results.push(`Exported data for ${entityTypes.length} entity types`);\n            console.log(`[ExportDataWorkflow] ✅ Exported all data`);\n            return exportData;\n        } catch (error) {\n            const errorMsg = `Failed to export all data: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ExportDataWorkflow] ❌ ${errorMsg}`);\n            return null;\n        }\n    }\n    /**\r\n   * Export specific entity type\r\n   */ static async exportEntityType(entityType, exportData, results, errors) {\n        try {\n            // Get all entity IDs from index\n            const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(entityType);\n            const entityIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(indexKey);\n            if (entityIds.length === 0) {\n                results.push(`No ${entityType} entities to export`);\n                return;\n            }\n            // Export each entity\n            for (const entityId of entityIds){\n                try {\n                    const dataKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(entityType, entityId);\n                    const entityData = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.get(dataKey);\n                    if (entityData) {\n                        const entity = JSON.parse(entityData);\n                        exportData.entities[entityType].push(entity);\n                    }\n                } catch (error) {\n                    console.warn(`[ExportDataWorkflow] ⚠️ Failed to export ${entityType} ${entityId}:`, error);\n                }\n            }\n            results.push(`Exported ${exportData.entities[entityType].length} ${entityType} entities`);\n            console.log(`[ExportDataWorkflow] ✅ Exported ${exportData.entities[entityType].length} ${entityType} entities`);\n        } catch (error) {\n            const errorMsg = `Failed to export ${entityType}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ExportDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Export links\r\n   */ static async exportLinks(exportData, results, errors) {\n        try {\n            // Get all link IDs\n            const linksIndexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"links\");\n            const linkIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(linksIndexKey);\n            if (linkIds.length === 0) {\n                results.push(\"No links to export\");\n                return;\n            }\n            // Export each link\n            for (const linkId of linkIds){\n                try {\n                    const linkKey = `links:link:${linkId}`;\n                    const linkData = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.get(linkKey);\n                    if (linkData) {\n                        const link = JSON.parse(linkData);\n                        exportData.links.push(link);\n                    }\n                } catch (error) {\n                    console.warn(`[ExportDataWorkflow] ⚠️ Failed to export link ${linkId}:`, error);\n                }\n            }\n            results.push(`Exported ${exportData.links.length} links`);\n            console.log(`[ExportDataWorkflow] ✅ Exported ${exportData.links.length} links`);\n        } catch (error) {\n            const errorMsg = `Failed to export links: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ExportDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Export logs\r\n   */ static async exportLogs(exportData, results, errors) {\n        try {\n            const logTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\",\n                \"links\"\n            ];\n            for (const logType of logTypes){\n                try {\n                    const logKey = `logs:${logType}`;\n                    const logData = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.lrange(logKey, 0, -1);\n                    if (logData && logData.length > 0) {\n                        exportData.logs[logType] = logData.map((entry)=>JSON.parse(entry));\n                        results.push(`Exported ${logData.length} ${logType} log entries`);\n                    } else {\n                        exportData.logs[logType] = [];\n                        results.push(`No ${logType} log entries to export`);\n                    }\n                } catch (error) {\n                    console.warn(`[ExportDataWorkflow] ⚠️ Failed to export ${logType} logs:`, error);\n                    exportData.logs[logType] = [];\n                }\n            }\n            console.log(`[ExportDataWorkflow] ✅ Exported logs for ${logTypes.length} log types`);\n        } catch (error) {\n            const errorMsg = `Failed to export logs: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ExportDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Export settlements as reference data (not a core entity)\r\n   */ static async exportSettlements(exportData, results, errors) {\n        try {\n            console.log(\"[ExportDataWorkflow] \\uD83D\\uDCE4 Exporting settlements as reference data...\");\n            // Get all settlement IDs from index\n            const settlementsIndexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"settlements\");\n            const settlementIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(settlementsIndexKey);\n            if (settlementIds.length === 0) {\n                results.push(\"No settlements to export\");\n                return;\n            }\n            // Export each settlement\n            for (const settlementId of settlementIds){\n                try {\n                    const dataKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(\"settlements\", settlementId);\n                    const settlementData = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.get(dataKey);\n                    if (settlementData) {\n                        const settlement = JSON.parse(settlementData);\n                        exportData.settlements.push(settlement);\n                    }\n                } catch (error) {\n                    console.warn(`[ExportDataWorkflow] ⚠️ Failed to export settlement ${settlementId}:`, error);\n                }\n            }\n            results.push(`Exported ${exportData.settlements.length} settlements as reference data`);\n            console.log(`[ExportDataWorkflow] ✅ Exported ${exportData.settlements.length} settlements`);\n        } catch (error) {\n            const errorMsg = `Failed to export settlements: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ExportDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./workflows/settings/export-data-workflow.ts\n");

/***/ }),

/***/ "(rsc)/./workflows/settings/import-data-workflow.ts":
/*!****************************************************!*\
  !*** ./workflows/settings/import-data-workflow.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImportDataWorkflow: () => (/* binding */ ImportDataWorkflow)\n/* harmony export */ });\n/* harmony import */ var _vercel_kv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/kv */ \"(rsc)/./node_modules/@vercel/kv/dist/index.js\");\n/* harmony import */ var _data_store_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/data-store/keys */ \"(rsc)/./data-store/keys.ts\");\n// workflows/settings/import-data-workflow.ts\n// Import Data Workflow for KV-only architecture\n\n\nclass ImportDataWorkflow {\n    /**\r\n   * Execute import data operation\r\n   */ static async execute(importData) {\n        try {\n            console.log(\"[ImportDataWorkflow] \\uD83D\\uDCE5 Starting import data operation...\");\n            const isKV = Boolean(process.env.KV_REST_API_URL);\n            const isServer = \"undefined\" === \"undefined\";\n            const results = [];\n            const errors = [];\n            console.log(`[ImportDataWorkflow] 🌍 Environment: ${isKV ? \"KV (Production)\" : \"Local (Development)\"}`);\n            console.log(`[ImportDataWorkflow] 🖥️ Context: ${isServer ? \"Server\" : \"Client\"}`);\n            // For local environment, we need to run on client side\n            if (!isKV && isServer) {\n                console.log(`[ImportDataWorkflow] ⚠️ Local environment detected on server - returning instruction for client-side execution`);\n                return {\n                    success: true,\n                    message: \"Import data requires client-side execution for local environment\",\n                    data: {\n                        results: [\n                            \"Client-side import data required for local environment\"\n                        ],\n                        errors: [],\n                        operation: \"import-data\",\n                        environment: \"local\",\n                        requiresClientExecution: true\n                    }\n                };\n            }\n            // Validate import data\n            if (!this.validateImportData(importData, errors)) {\n                return {\n                    success: false,\n                    message: \"Invalid import data format\",\n                    data: {\n                        results: [],\n                        errors,\n                        operation: \"import-data\",\n                        environment: isKV ? \"kv\" : \"local\"\n                    }\n                };\n            }\n            // Import all data\n            await this.importAllData(importData, results, errors);\n            const success = errors.length === 0;\n            const message = success ? `Successfully imported data - ${results.length} operations completed` : `Import data completed with ${errors.length} errors - ${results.length} operations completed`;\n            console.log(`[ImportDataWorkflow] ✅ Import data operation completed: ${message}`);\n            return {\n                success,\n                message,\n                data: {\n                    results,\n                    errors,\n                    operation: \"import-data\",\n                    environment: isKV ? \"kv\" : \"local\"\n                }\n            };\n        } catch (error) {\n            console.error(\"[ImportDataWorkflow] ❌ Import data operation failed:\", error);\n            return {\n                success: false,\n                message: `Import data operation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                data: {\n                    results: [],\n                    errors: [\n                        error instanceof Error ? error.message : \"Unknown error\"\n                    ],\n                    operation: \"import-data\",\n                    environment: \"unknown\"\n                }\n            };\n        }\n    }\n    /**\r\n   * Validate import data format\r\n   */ static validateImportData(importData, errors) {\n        try {\n            if (!importData || typeof importData !== \"object\") {\n                errors.push(\"Import data must be an object\");\n                return false;\n            }\n            if (!importData.entities || typeof importData.entities !== \"object\") {\n                errors.push(\"Import data must have entities property\");\n                return false;\n            }\n            const requiredEntityTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\"\n            ];\n            for (const entityType of requiredEntityTypes){\n                if (!Array.isArray(importData.entities[entityType])) {\n                    errors.push(`Import data must have ${entityType} as an array`);\n                    return false;\n                }\n            }\n            if (!Array.isArray(importData.links)) {\n                errors.push(\"Import data must have links as an array\");\n                return false;\n            }\n            if (!importData.logs || typeof importData.logs !== \"object\") {\n                errors.push(\"Import data must have logs property\");\n                return false;\n            }\n            // Settlements are optional reference data\n            if (importData.settlements && !Array.isArray(importData.settlements)) {\n                errors.push(\"Import data settlements must be an array if present\");\n                return false;\n            }\n            return true;\n        } catch (error) {\n            errors.push(`Failed to validate import data: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n            return false;\n        }\n    }\n    /**\r\n   * Import all data\r\n   */ static async importAllData(importData, results, errors) {\n        try {\n            console.log(\"[ImportDataWorkflow] \\uD83D\\uDCE5 Importing all data...\");\n            // Import all entity types\n            const entityTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\"\n            ];\n            for (const entityType of entityTypes){\n                try {\n                    await this.importEntityType(entityType, importData.entities[entityType], results, errors);\n                } catch (error) {\n                    const errorMsg = `Failed to import ${entityType}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[ImportDataWorkflow] ❌ ${errorMsg}`);\n                }\n            }\n            // Import settlements as reference data (if present)\n            if (importData.settlements && Array.isArray(importData.settlements)) {\n                await this.importSettlements(importData.settlements, results, errors);\n            }\n            // Import links\n            await this.importLinks(importData.links, results, errors);\n            // Import logs\n            await this.importLogs(importData.logs, results, errors);\n            results.push(`Imported data for ${entityTypes.length} entity types`);\n            console.log(`[ImportDataWorkflow] ✅ Imported all data`);\n        } catch (error) {\n            const errorMsg = `Failed to import all data: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ImportDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Import specific entity type\r\n   */ static async importEntityType(entityType, entities, results, errors) {\n        try {\n            if (!entities || entities.length === 0) {\n                results.push(`No ${entityType} entities to import`);\n                return;\n            }\n            // Clear existing entities for this type\n            const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(entityType);\n            const existingIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(indexKey);\n            if (existingIds.length > 0) {\n                const dataKeys = existingIds.map((id)=>(0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(entityType, id));\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(...dataKeys);\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(indexKey);\n                results.push(`Cleared ${existingIds.length} existing ${entityType} entities`);\n            }\n            // Import each entity\n            let importedCount = 0;\n            for (const entity of entities){\n                try {\n                    if (!entity.id) {\n                        console.warn(`[ImportDataWorkflow] ⚠️ Skipping ${entityType} entity without ID:`, entity);\n                        continue;\n                    }\n                    const dataKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(entityType, entity.id);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.set(dataKey, JSON.stringify(entity));\n                    // Add to index\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.sadd(indexKey, entity.id);\n                    importedCount++;\n                } catch (error) {\n                    console.warn(`[ImportDataWorkflow] ⚠️ Failed to import ${entityType} entity:`, error);\n                }\n            }\n            results.push(`Imported ${importedCount} ${entityType} entities`);\n            console.log(`[ImportDataWorkflow] ✅ Imported ${importedCount} ${entityType} entities`);\n        } catch (error) {\n            const errorMsg = `Failed to import ${entityType}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ImportDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Import links\r\n   */ static async importLinks(links, results, errors) {\n        try {\n            if (!links || links.length === 0) {\n                results.push(\"No links to import\");\n                return;\n            }\n            // Clear existing links\n            const linksIndexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"links\");\n            const existingLinkIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(linksIndexKey);\n            if (existingLinkIds.length > 0) {\n                const linkKeys = existingLinkIds.map((id)=>`links:link:${id}`);\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(...linkKeys);\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(linksIndexKey);\n                results.push(`Cleared ${existingLinkIds.length} existing links`);\n            }\n            // Import each link\n            let importedCount = 0;\n            for (const link of links){\n                try {\n                    if (!link.id) {\n                        console.warn(`[ImportDataWorkflow] ⚠️ Skipping link without ID:`, link);\n                        continue;\n                    }\n                    const linkKey = `links:link:${link.id}`;\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.set(linkKey, JSON.stringify(link));\n                    // Add to links index\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.sadd(linksIndexKey, link.id);\n                    importedCount++;\n                } catch (error) {\n                    console.warn(`[ImportDataWorkflow] ⚠️ Failed to import link:`, error);\n                }\n            }\n            results.push(`Imported ${importedCount} links`);\n            console.log(`[ImportDataWorkflow] ✅ Imported ${importedCount} links`);\n        } catch (error) {\n            const errorMsg = `Failed to import links: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ImportDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Import logs\r\n   */ static async importLogs(logs, results, errors) {\n        try {\n            const logTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\",\n                \"links\"\n            ];\n            for (const logType of logTypes){\n                try {\n                    const logEntries = logs[logType] || [];\n                    if (logEntries.length === 0) {\n                        results.push(`No ${logType} log entries to import`);\n                        continue;\n                    }\n                    // Clear existing logs for this type\n                    const logKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildLogKey)(logType);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(logKey);\n                    // Import each log entry\n                    for (const logEntry of logEntries){\n                        try {\n                            await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.lpush(logKey, JSON.stringify(logEntry));\n                        } catch (error) {\n                            console.warn(`[ImportDataWorkflow] ⚠️ Failed to import ${logType} log entry:`, error);\n                        }\n                    }\n                    results.push(`Imported ${logEntries.length} ${logType} log entries`);\n                } catch (error) {\n                    console.warn(`[ImportDataWorkflow] ⚠️ Failed to import ${logType} logs:`, error);\n                }\n            }\n            console.log(`[ImportDataWorkflow] ✅ Imported logs for ${logTypes.length} log types`);\n        } catch (error) {\n            const errorMsg = `Failed to import logs: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ImportDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Import settlements as reference data (not a core entity)\r\n   */ static async importSettlements(settlements, results, errors) {\n        try {\n            if (!settlements || settlements.length === 0) {\n                results.push(\"No settlements to import\");\n                return;\n            }\n            console.log(\"[ImportDataWorkflow] \\uD83D\\uDCE5 Importing settlements as reference data...\");\n            // Clear existing settlements\n            const settlementsIndexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"settlements\");\n            const existingSettlementIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(settlementsIndexKey);\n            if (existingSettlementIds.length > 0) {\n                const dataKeys = existingSettlementIds.map((id)=>(0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(\"settlements\", id));\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(...dataKeys);\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(settlementsIndexKey);\n                results.push(`Cleared ${existingSettlementIds.length} existing settlements`);\n            }\n            // Import each settlement\n            for (const settlement of settlements){\n                try {\n                    const dataKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(\"settlements\", settlement.id);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.set(dataKey, JSON.stringify(settlement));\n                    // Add to settlements index\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.sadd(settlementsIndexKey, settlement.id);\n                } catch (error) {\n                    console.warn(`[ImportDataWorkflow] ⚠️ Failed to import settlement ${settlement.id}:`, error);\n                }\n            }\n            results.push(`Imported ${settlements.length} settlements as reference data`);\n            console.log(`[ImportDataWorkflow] ✅ Imported ${settlements.length} settlements`);\n        } catch (error) {\n            const errorMsg = `Failed to import settlements: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ImportDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi93b3JrZmxvd3Mvc2V0dGluZ3MvaW1wb3J0LWRhdGEtd29ya2Zsb3cudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNkNBQTZDO0FBQzdDLGdEQUFnRDtBQUVoQjtBQUM2QztBQWN0RSxNQUFNSTtJQUVYOztHQUVDLEdBQ0QsYUFBYUMsUUFBUUMsVUFBZSxFQUEyQjtRQUM3RCxJQUFJO1lBQ0ZDLFFBQVFDLEdBQUcsQ0FBQztZQUVaLE1BQU1DLE9BQU9DLFFBQVFDLFFBQVFDLEdBQUcsQ0FBQ0MsZUFBZTtZQUNoRCxNQUFNQyxXQUFXLGdCQUFrQjtZQUNuQyxNQUFNQyxVQUFvQixFQUFFO1lBQzVCLE1BQU1DLFNBQW1CLEVBQUU7WUFFM0JULFFBQVFDLEdBQUcsQ0FBQyxDQUFDLHFDQUFxQyxFQUFFQyxPQUFPLG9CQUFvQixzQkFBc0IsQ0FBQztZQUN0R0YsUUFBUUMsR0FBRyxDQUFDLENBQUMsa0NBQWtDLEVBQUVNLFdBQVcsV0FBVyxTQUFTLENBQUM7WUFFakYsdURBQXVEO1lBQ3ZELElBQUksQ0FBQ0wsUUFBUUssVUFBVTtnQkFDckJQLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLDhHQUE4RyxDQUFDO2dCQUM1SCxPQUFPO29CQUNMUyxTQUFTO29CQUNUQyxTQUFTO29CQUNUQyxNQUFNO3dCQUNKSixTQUFTOzRCQUFDO3lCQUF5RDt3QkFDbkVDLFFBQVEsRUFBRTt3QkFDVkksV0FBVzt3QkFDWEMsYUFBYTt3QkFDYkMseUJBQXlCO29CQUMzQjtnQkFDRjtZQUNGO1lBRUEsdUJBQXVCO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUNDLGtCQUFrQixDQUFDakIsWUFBWVUsU0FBUztnQkFDaEQsT0FBTztvQkFDTEMsU0FBUztvQkFDVEMsU0FBUztvQkFDVEMsTUFBTTt3QkFDSkosU0FBUyxFQUFFO3dCQUNYQzt3QkFDQUksV0FBVzt3QkFDWEMsYUFBYVosT0FBTyxPQUFPO29CQUM3QjtnQkFDRjtZQUNGO1lBRUEsa0JBQWtCO1lBQ2xCLE1BQU0sSUFBSSxD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TztvQkFDZG5CLFFBQVE2QyxJQUFJLENBQUMsQ0FBQyxvREFBb0QsRUFBRW1CLFdBQVd2QixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUV0QjtnQkFDeEY7WUFDRjtZQUVBWCxRQUFRYSxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUVRLFlBQVlYLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQztZQUMzRWxCLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLGdDQUFnQyxFQUFFNEIsWUFBWVgsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUVqRixFQUFFLE9BQU9DLE9BQU87WUFDZCxNQUFNYSxXQUFXLENBQUMsOEJBQThCLEVBQUViLGlCQUFpQkMsUUFBUUQsTUFBTVIsT0FBTyxHQUFHLGdCQUFnQixDQUFDO1lBQzVHRixPQUFPWSxJQUFJLENBQUNXO1lBQ1poQyxRQUFRbUIsS0FBSyxDQUFDLENBQUMsdUJBQXVCLEVBQUVhLFNBQVMsQ0FBQztRQUNwRDtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVnYW1lLWFkbWluLy4vd29ya2Zsb3dzL3NldHRpbmdzL2ltcG9ydC1kYXRhLXdvcmtmbG93LnRzPzNmYTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gd29ya2Zsb3dzL3NldHRpbmdzL2ltcG9ydC1kYXRhLXdvcmtmbG93LnRzXHJcbi8vIEltcG9ydCBEYXRhIFdvcmtmbG93IGZvciBLVi1vbmx5IGFyY2hpdGVjdHVyZVxyXG5cclxuaW1wb3J0IHsga3YgfSBmcm9tICdAdmVyY2VsL2t2JztcclxuaW1wb3J0IHsgYnVpbGREYXRhS2V5LCBidWlsZEluZGV4S2V5LCBidWlsZExvZ0tleSB9IGZyb20gJ0AvZGF0YS1zdG9yZS9rZXlzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3NSZXN1bHQge1xyXG4gIHN1Y2Nlc3M6IGJvb2xlYW47XHJcbiAgbWVzc2FnZTogc3RyaW5nO1xyXG4gIGRhdGE/OiB7XHJcbiAgICByZXN1bHRzOiBzdHJpbmdbXTtcclxuICAgIGVycm9yczogc3RyaW5nW107XHJcbiAgICBvcGVyYXRpb246IHN0cmluZztcclxuICAgIGVudmlyb25tZW50OiBzdHJpbmc7XHJcbiAgICByZXF1aXJlc0NsaWVudEV4ZWN1dGlvbj86IGJvb2xlYW47XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEltcG9ydERhdGFXb3JrZmxvdyB7XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogRXhlY3V0ZSBpbXBvcnQgZGF0YSBvcGVyYXRpb25cclxuICAgKi9cclxuICBzdGF0aWMgYXN5bmMgZXhlY3V0ZShpbXBvcnREYXRhOiBhbnkpOiBQcm9taXNlPFNldHRpbmdzUmVzdWx0PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZygnW0ltcG9ydERhdGFXb3JrZmxvd10g8J+TpSBTdGFydGluZyBpbXBvcnQgZGF0YSBvcGVyYXRpb24uLi4nKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGlzS1YgPSBCb29sZWFuKHByb2Nlc3MuZW52LktWX1JFU1RfQVBJX1VSTCk7XHJcbiAgICAgIGNvbnN0IGlzU2VydmVyID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCc7XHJcbiAgICAgIGNvbnN0IHJlc3VsdHM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKGBbSW1wb3J0RGF0YVdvcmtmbG93XSDwn4yNIEVudmlyb25tZW50OiAke2lzS1YgPyAnS1YgKFByb2R1Y3Rpb24pJyA6ICdMb2NhbCAoRGV2ZWxvcG1lbnQpJ31gKTtcclxuICAgICAgY29uc29sZS5sb2coYFtJbXBvcnREYXRhV29ya2Zsb3ddIPCflqXvuI8gQ29udGV4dDogJHtpc1NlcnZlciA/ICdTZXJ2ZXInIDogJ0NsaWVudCd9YCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBGb3IgbG9jYWwgZW52aXJvbm1lbnQsIHdlIG5lZWQgdG8gcnVuIG9uIGNsaWVudCBzaWRlXHJcbiAgICAgIGlmICghaXNLViAmJiBpc1NlcnZlcikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBbSW1wb3J0RGF0YVdvcmtmbG93XSDimqDvuI8gTG9jYWwgZW52aXJvbm1lbnQgZGV0ZWN0ZWQgb24gc2VydmVyIC0gcmV0dXJuaW5nIGluc3RydWN0aW9uIGZvciBjbGllbnQtc2lkZSBleGVjdXRpb25gKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgIG1lc3NhZ2U6ICdJbXBvcnQgZGF0YSByZXF1aXJlcyBjbGllbnQtc2lkZSBleGVjdXRpb24gZm9yIGxvY2FsIGVudmlyb25tZW50JyxcclxuICAgICAgICAgIGRhdGE6IHsgXHJcbiAgICAgICAgICAgIHJlc3VsdHM6IFsnQ2xpZW50LXNpZGUgaW1wb3J0IGRhdGEgcmVxdWlyZWQgZm9yIGxvY2FsIGVudmlyb25tZW50J10sXHJcbiAgICAgICAgICAgIGVycm9yczogW10sXHJcbiAgICAgICAgICAgIG9wZXJhdGlvbjogJ2ltcG9ydC1kYXRhJyxcclxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6ICdsb2NhbCcsXHJcbiAgICAgICAgICAgIHJlcXVpcmVzQ2xpZW50RXhlY3V0aW9uOiB0cnVlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gVmFsaWRhdGUgaW1wb3J0IGRhdGFcclxuICAgICAgaWYgKCF0aGlzLnZhbGlkYXRlSW1wb3J0RGF0YShpbXBvcnREYXRhLCBlcnJvcnMpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgaW1wb3J0IGRhdGEgZm9ybWF0JyxcclxuICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgcmVzdWx0czogW10sXHJcbiAgICAgICAgICAgIGVycm9ycyxcclxuICAgICAgICAgICAgb3BlcmF0aW9uOiAnaW1wb3J0LWRhdGEnLFxyXG4gICAgICAgICAgICBlbnZpcm9ubWVudDogaXNLViA/ICdrdicgOiAnbG9jYWwnXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gSW1wb3J0IGFsbCBkYXRhXHJcbiAgICAgIGF3YWl0IHRoaXMuaW1wb3J0QWxsRGF0YShpbXBvcnREYXRhLCByZXN1bHRzLCBlcnJvcnMpO1xyXG4gICAgICBcclxuICAgICAgY29uc3Qgc3VjY2VzcyA9IGVycm9ycy5sZW5ndGggPT09IDA7XHJcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBzdWNjZXNzIFxyXG4gICAgICAgID8gYFN1Y2Nlc3NmdWxseSBpbXBvcnRlZCBkYXRhIC0gJHtyZXN1bHRzLmxlbmd0aH0gb3BlcmF0aW9ucyBjb21wbGV0ZWRgXHJcbiAgICAgICAgOiBgSW1wb3J0IGRhdGEgY29tcGxldGVkIHdpdGggJHtlcnJvcnMubGVuZ3RofSBlcnJvcnMgLSAke3Jlc3VsdHMubGVuZ3RofSBvcGVyYXRpb25zIGNvbXBsZXRlZGA7XHJcbiAgICAgIFxyXG4gICAgICBjb25zb2xlLmxvZyhgW0ltcG9ydERhdGFXb3JrZmxvd10g4pyFIEltcG9ydCBkYXRhIG9wZXJhdGlvbiBjb21wbGV0ZWQ6ICR7bWVzc2FnZX1gKTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzcyxcclxuICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgIHJlc3VsdHMsXHJcbiAgICAgICAgICBlcnJvcnMsXHJcbiAgICAgICAgICBvcGVyYXRpb246ICdpbXBvcnQtZGF0YScsXHJcbiAgICAgICAgICBlbnZpcm9ubWVudDogaXNLViA/ICdrdicgOiAnbG9jYWwnXHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgICBcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tJbXBvcnREYXRhV29ya2Zsb3ddIOKdjCBJbXBvcnQgZGF0YSBvcGVyYXRpb24gZmFpbGVkOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBtZXNzYWdlOiBgSW1wb3J0IGRhdGEgb3BlcmF0aW9uIGZhaWxlZDogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gLFxyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgIHJlc3VsdHM6IFtdLFxyXG4gICAgICAgICAgZXJyb3JzOiBbZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvciddLFxyXG4gICAgICAgICAgb3BlcmF0aW9uOiAnaW1wb3J0LWRhdGEnLFxyXG4gICAgICAgICAgZW52aXJvbm1lbnQ6ICd1bmtub3duJ1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdGUgaW1wb3J0IGRhdGEgZm9ybWF0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgdmFsaWRhdGVJbXBvcnREYXRhKGltcG9ydERhdGE6IGFueSwgZXJyb3JzOiBzdHJpbmdbXSk6IGJvb2xlYW4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKCFpbXBvcnREYXRhIHx8IHR5cGVvZiBpbXBvcnREYXRhICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGVycm9ycy5wdXNoKCdJbXBvcnQgZGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKCFpbXBvcnREYXRhLmVudGl0aWVzIHx8IHR5cGVvZiBpbXBvcnREYXRhLmVudGl0aWVzICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGVycm9ycy5wdXNoKCdJbXBvcnQgZGF0YSBtdXN0IGhhdmUgZW50aXRpZXMgcHJvcGVydHknKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHJlcXVpcmVkRW50aXR5VHlwZXMgPSBbJ3Rhc2tzJywgJ2l0ZW1zJywgJ3NhbGVzJywgJ2ZpbmFuY2lhbHMnLCAnY2hhcmFjdGVycycsICdwbGF5ZXJzJywgJ3NpdGVzJ107XHJcbiAgICAgIGZvciAoY29uc3QgZW50aXR5VHlwZSBvZiByZXF1aXJlZEVudGl0eVR5cGVzKSB7XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGltcG9ydERhdGEuZW50aXRpZXNbZW50aXR5VHlwZV0pKSB7XHJcbiAgICAgICAgICBlcnJvcnMucHVzaChgSW1wb3J0IGRhdGEgbXVzdCBoYXZlICR7ZW50aXR5VHlwZX0gYXMgYW4gYXJyYXlgKTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbXBvcnREYXRhLmxpbmtzKSkge1xyXG4gICAgICAgIGVycm9ycy5wdXNoKCdJbXBvcnQgZGF0YSBtdXN0IGhhdmUgbGlua3MgYXMgYW4gYXJyYXknKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmICghaW1wb3J0RGF0YS5sb2dzIHx8IHR5cGVvZiBpbXBvcnREYXRhLmxvZ3MgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgZXJyb3JzLnB1c2goJ0ltcG9ydCBkYXRhIG11c3QgaGF2ZSBsb2dzIHByb3BlcnR5Jyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBTZXR0bGVtZW50cyBhcmUgb3B0aW9uYWwgcmVmZXJlbmNlIGRhdGFcclxuICAgICAgaWYgKGltcG9ydERhdGEuc2V0dGxlbWVudHMgJiYgIUFycmF5LmlzQXJyYXkoaW1wb3J0RGF0YS5zZXR0bGVtZW50cykpIHtcclxuICAgICAgICBlcnJvcnMucHVzaCgnSW1wb3J0IGRhdGEgc2V0dGxlbWVudHMgbXVzdCBiZSBhbiBhcnJheSBpZiBwcmVzZW50Jyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGVycm9ycy5wdXNoKGBGYWlsZWQgdG8gdmFsaWRhdGUgaW1wb3J0IGRhdGE6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogSW1wb3J0IGFsbCBkYXRhXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgaW1wb3J0QWxsRGF0YShpbXBvcnREYXRhOiBhbnksIHJlc3VsdHM6IHN0cmluZ1tdLCBlcnJvcnM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZygnW0ltcG9ydERhdGFXb3JrZmxvd10g8J+TpSBJbXBvcnRpbmcgYWxsIGRhdGEuLi4nKTtcclxuICAgICAgXHJcbiAgICAgIC8vIEltcG9ydCBhbGwgZW50aXR5IHR5cGVzXHJcbiAgICAgIGNvbnN0IGVudGl0eVR5cGVzID0gWyd0YXNrcycsICdpdGVtcycsICdzYWxlcycsICdmaW5hbmNpYWxzJywgJ2NoYXJhY3RlcnMnLCAncGxheWVycycsICdzaXRlcyddO1xyXG4gICAgICBcclxuICAgICAgZm9yIChjb25zdCBlbnRpdHlUeXBlIG9mIGVudGl0eVR5cGVzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMuaW1wb3J0RW50aXR5VHlwZShlbnRpdHlUeXBlLCBpbXBvcnREYXRhLmVudGl0aWVzW2VudGl0eVR5cGVdLCByZXN1bHRzLCBlcnJvcnMpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICBjb25zdCBlcnJvck1zZyA9IGBGYWlsZWQgdG8gaW1wb3J0ICR7ZW50aXR5VHlwZX06ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YDtcclxuICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yTXNnKTtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtJbXBvcnREYXRhV29ya2Zsb3ddIOKdjCAke2Vycm9yTXNnfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gSW1wb3J0IHNldHRsZW1lbnRzIGFzIHJlZmVyZW5jZSBkYXRhIChpZiBwcmVzZW50KVxyXG4gICAgICBpZiAoaW1wb3J0RGF0YS5zZXR0bGVtZW50cyAmJiBBcnJheS5pc0FycmF5KGltcG9ydERhdGEuc2V0dGxlbWVudHMpKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5pbXBvcnRTZXR0bGVtZW50cyhpbXBvcnREYXRhLnNldHRsZW1lbnRzLCByZXN1bHRzLCBlcnJvcnMpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBJbXBvcnQgbGlua3NcclxuICAgICAgYXdhaXQgdGhpcy5pbXBvcnRMaW5rcyhpbXBvcnREYXRhLmxpbmtzLCByZXN1bHRzLCBlcnJvcnMpO1xyXG4gICAgICBcclxuICAgICAgLy8gSW1wb3J0IGxvZ3NcclxuICAgICAgYXdhaXQgdGhpcy5pbXBvcnRMb2dzKGltcG9ydERhdGEubG9ncywgcmVzdWx0cywgZXJyb3JzKTtcclxuICAgICAgXHJcbiAgICAgIHJlc3VsdHMucHVzaChgSW1wb3J0ZWQgZGF0YSBmb3IgJHtlbnRpdHlUeXBlcy5sZW5ndGh9IGVudGl0eSB0eXBlc2ApO1xyXG4gICAgICBjb25zb2xlLmxvZyhgW0ltcG9ydERhdGFXb3JrZmxvd10g4pyFIEltcG9ydGVkIGFsbCBkYXRhYCk7XHJcbiAgICAgIFxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc3QgZXJyb3JNc2cgPSBgRmFpbGVkIHRvIGltcG9ydCBhbGwgZGF0YTogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gO1xyXG4gICAgICBlcnJvcnMucHVzaChlcnJvck1zZyk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFtJbXBvcnREYXRhV29ya2Zsb3ddIOKdjCAke2Vycm9yTXNnfWApO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiBJbXBvcnQgc3BlY2lmaWMgZW50aXR5IHR5cGVcclxuICAgKi9cclxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBpbXBvcnRFbnRpdHlUeXBlKGVudGl0eVR5cGU6IHN0cmluZywgZW50aXRpZXM6IGFueVtdLCByZXN1bHRzOiBzdHJpbmdbXSwgZXJyb3JzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKCFlbnRpdGllcyB8fCBlbnRpdGllcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXN1bHRzLnB1c2goYE5vICR7ZW50aXR5VHlwZX0gZW50aXRpZXMgdG8gaW1wb3J0YCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBDbGVhciBleGlzdGluZyBlbnRpdGllcyBmb3IgdGhpcyB0eXBlXHJcbiAgICAgIGNvbnN0IGluZGV4S2V5ID0gYnVpbGRJbmRleEtleShlbnRpdHlUeXBlKTtcclxuICAgICAgY29uc3QgZXhpc3RpbmdJZHMgPSBhd2FpdCBrdi5zbWVtYmVycyhpbmRleEtleSk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoZXhpc3RpbmdJZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGFLZXlzID0gZXhpc3RpbmdJZHMubWFwKGlkID0+IGJ1aWxkRGF0YUtleShlbnRpdHlUeXBlLCBpZCkpO1xyXG4gICAgICAgIGF3YWl0IGt2LmRlbCguLi5kYXRhS2V5cyk7XHJcbiAgICAgICAgYXdhaXQga3YuZGVsKGluZGV4S2V5KTtcclxuICAgICAgICByZXN1bHRzLnB1c2goYENsZWFyZWQgJHtleGlzdGluZ0lkcy5sZW5ndGh9IGV4aXN0aW5nICR7ZW50aXR5VHlwZX0gZW50aXRpZXNgKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gSW1wb3J0IGVhY2ggZW50aXR5XHJcbiAgICAgIGxldCBpbXBvcnRlZENvdW50ID0gMDtcclxuICAgICAgZm9yIChjb25zdCBlbnRpdHkgb2YgZW50aXRpZXMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgaWYgKCFlbnRpdHkuaWQpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbSW1wb3J0RGF0YVdvcmtmbG93XSDimqDvuI8gU2tpcHBpbmcgJHtlbnRpdHlUeXBlfSBlbnRpdHkgd2l0aG91dCBJRDpgLCBlbnRpdHkpO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY29uc3QgZGF0YUtleSA9IGJ1aWxkRGF0YUtleShlbnRpdHlUeXBlLCBlbnRpdHkuaWQpO1xyXG4gICAgICAgICAgYXdhaXQga3Yuc2V0KGRhdGFLZXksIEpTT04uc3RyaW5naWZ5KGVudGl0eSkpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBBZGQgdG8gaW5kZXhcclxuICAgICAgICAgIGF3YWl0IGt2LnNhZGQoaW5kZXhLZXksIGVudGl0eS5pZCk7XHJcbiAgICAgICAgICBpbXBvcnRlZENvdW50Kys7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihgW0ltcG9ydERhdGFXb3JrZmxvd10g4pqg77iPIEZhaWxlZCB0byBpbXBvcnQgJHtlbnRpdHlUeXBlfSBlbnRpdHk6YCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmVzdWx0cy5wdXNoKGBJbXBvcnRlZCAke2ltcG9ydGVkQ291bnR9ICR7ZW50aXR5VHlwZX0gZW50aXRpZXNgKTtcclxuICAgICAgY29uc29sZS5sb2coYFtJbXBvcnREYXRhV29ya2Zsb3ddIOKchSBJbXBvcnRlZCAke2ltcG9ydGVkQ291bnR9ICR7ZW50aXR5VHlwZX0gZW50aXRpZXNgKTtcclxuICAgICAgXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zdCBlcnJvck1zZyA9IGBGYWlsZWQgdG8gaW1wb3J0ICR7ZW50aXR5VHlwZX06ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YDtcclxuICAgICAgZXJyb3JzLnB1c2goZXJyb3JNc2cpO1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBbSW1wb3J0RGF0YVdvcmtmbG93XSDinYwgJHtlcnJvck1zZ31gKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogSW1wb3J0IGxpbmtzXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgaW1wb3J0TGlua3MobGlua3M6IGFueVtdLCByZXN1bHRzOiBzdHJpbmdbXSwgZXJyb3JzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKCFsaW5rcyB8fCBsaW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXN1bHRzLnB1c2goJ05vIGxpbmtzIHRvIGltcG9ydCcpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gQ2xlYXIgZXhpc3RpbmcgbGlua3NcclxuICAgICAgY29uc3QgbGlua3NJbmRleEtleSA9IGJ1aWxkSW5kZXhLZXkoJ2xpbmtzJyk7XHJcbiAgICAgIGNvbnN0IGV4aXN0aW5nTGlua0lkcyA9IGF3YWl0IGt2LnNtZW1iZXJzKGxpbmtzSW5kZXhLZXkpO1xyXG4gICAgICBcclxuICAgICAgaWYgKGV4aXN0aW5nTGlua0lkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgbGlua0tleXMgPSBleGlzdGluZ0xpbmtJZHMubWFwKGlkID0+IGBsaW5rczpsaW5rOiR7aWR9YCk7XHJcbiAgICAgICAgYXdhaXQga3YuZGVsKC4uLmxpbmtLZXlzKTtcclxuICAgICAgICBhd2FpdCBrdi5kZWwobGlua3NJbmRleEtleSk7XHJcbiAgICAgICAgcmVzdWx0cy5wdXNoKGBDbGVhcmVkICR7ZXhpc3RpbmdMaW5rSWRzLmxlbmd0aH0gZXhpc3RpbmcgbGlua3NgKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gSW1wb3J0IGVhY2ggbGlua1xyXG4gICAgICBsZXQgaW1wb3J0ZWRDb3VudCA9IDA7XHJcbiAgICAgIGZvciAoY29uc3QgbGluayBvZiBsaW5rcykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBpZiAoIWxpbmsuaWQpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbSW1wb3J0RGF0YVdvcmtmbG93XSDimqDvuI8gU2tpcHBpbmcgbGluayB3aXRob3V0IElEOmAsIGxpbmspO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY29uc3QgbGlua0tleSA9IGBsaW5rczpsaW5rOiR7bGluay5pZH1gO1xyXG4gICAgICAgICAgYXdhaXQga3Yuc2V0KGxpbmtLZXksIEpTT04uc3RyaW5naWZ5KGxpbmspKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gQWRkIHRvIGxpbmtzIGluZGV4XHJcbiAgICAgICAgICBhd2FpdCBrdi5zYWRkKGxpbmtzSW5kZXhLZXksIGxpbmsuaWQpO1xyXG4gICAgICAgICAgaW1wb3J0ZWRDb3VudCsrO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oYFtJbXBvcnREYXRhV29ya2Zsb3ddIOKaoO+4jyBGYWlsZWQgdG8gaW1wb3J0IGxpbms6YCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmVzdWx0cy5wdXNoKGBJbXBvcnRlZCAke2ltcG9ydGVkQ291bnR9IGxpbmtzYCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBbSW1wb3J0RGF0YVdvcmtmbG93XSDinIUgSW1wb3J0ZWQgJHtpbXBvcnRlZENvdW50fSBsaW5rc2ApO1xyXG4gICAgICBcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnN0IGVycm9yTXNnID0gYEZhaWxlZCB0byBpbXBvcnQgbGlua3M6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YDtcclxuICAgICAgZXJyb3JzLnB1c2goZXJyb3JNc2cpO1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBbSW1wb3J0RGF0YVdvcmtmbG93XSDinYwgJHtlcnJvck1zZ31gKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogSW1wb3J0IGxvZ3NcclxuICAgKi9cclxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBpbXBvcnRMb2dzKGxvZ3M6IGFueSwgcmVzdWx0czogc3RyaW5nW10sIGVycm9yczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGxvZ1R5cGVzID0gWyd0YXNrcycsICdpdGVtcycsICdzYWxlcycsICdmaW5hbmNpYWxzJywgJ2NoYXJhY3RlcnMnLCAncGxheWVycycsICdzaXRlcycsICdsaW5rcyddO1xyXG4gICAgICBcclxuICAgICAgZm9yIChjb25zdCBsb2dUeXBlIG9mIGxvZ1R5cGVzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnN0IGxvZ0VudHJpZXMgPSBsb2dzW2xvZ1R5cGVdIHx8IFtdO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAobG9nRW50cmllcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGBObyAke2xvZ1R5cGV9IGxvZyBlbnRyaWVzIHRvIGltcG9ydGApO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gQ2xlYXIgZXhpc3RpbmcgbG9ncyBmb3IgdGhpcyB0eXBlXHJcbiAgICAgICAgICBjb25zdCBsb2dLZXkgPSBidWlsZExvZ0tleShsb2dUeXBlKTtcclxuICAgICAgICAgIGF3YWl0IGt2LmRlbChsb2dLZXkpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBJbXBvcnQgZWFjaCBsb2cgZW50cnlcclxuICAgICAgICAgIGZvciAoY29uc3QgbG9nRW50cnkgb2YgbG9nRW50cmllcykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgIGF3YWl0IGt2LmxwdXNoKGxvZ0tleSwgSlNPTi5zdHJpbmdpZnkobG9nRW50cnkpKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFtJbXBvcnREYXRhV29ya2Zsb3ddIOKaoO+4jyBGYWlsZWQgdG8gaW1wb3J0ICR7bG9nVHlwZX0gbG9nIGVudHJ5OmAsIGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXN1bHRzLnB1c2goYEltcG9ydGVkICR7bG9nRW50cmllcy5sZW5ndGh9ICR7bG9nVHlwZX0gbG9nIGVudHJpZXNgKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKGBbSW1wb3J0RGF0YVdvcmtmbG93XSDimqDvuI8gRmFpbGVkIHRvIGltcG9ydCAke2xvZ1R5cGV9IGxvZ3M6YCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgY29uc29sZS5sb2coYFtJbXBvcnREYXRhV29ya2Zsb3ddIOKchSBJbXBvcnRlZCBsb2dzIGZvciAke2xvZ1R5cGVzLmxlbmd0aH0gbG9nIHR5cGVzYCk7XHJcbiAgICAgIFxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc3QgZXJyb3JNc2cgPSBgRmFpbGVkIHRvIGltcG9ydCBsb2dzOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWA7XHJcbiAgICAgIGVycm9ycy5wdXNoKGVycm9yTXNnKTtcclxuICAgICAgY29uc29sZS5lcnJvcihgW0ltcG9ydERhdGFXb3JrZmxvd10g4p2MICR7ZXJyb3JNc2d9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbXBvcnQgc2V0dGxlbWVudHMgYXMgcmVmZXJlbmNlIGRhdGEgKG5vdCBhIGNvcmUgZW50aXR5KVxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIGltcG9ydFNldHRsZW1lbnRzKHNldHRsZW1lbnRzOiBhbnlbXSwgcmVzdWx0czogc3RyaW5nW10sIGVycm9yczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICghc2V0dGxlbWVudHMgfHwgc2V0dGxlbWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmVzdWx0cy5wdXNoKCdObyBzZXR0bGVtZW50cyB0byBpbXBvcnQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKCdbSW1wb3J0RGF0YVdvcmtmbG93XSDwn5OlIEltcG9ydGluZyBzZXR0bGVtZW50cyBhcyByZWZlcmVuY2UgZGF0YS4uLicpO1xyXG4gICAgICBcclxuICAgICAgLy8gQ2xlYXIgZXhpc3Rpbmcgc2V0dGxlbWVudHNcclxuICAgICAgY29uc3Qgc2V0dGxlbWVudHNJbmRleEtleSA9IGJ1aWxkSW5kZXhLZXkoJ3NldHRsZW1lbnRzJyk7XHJcbiAgICAgIGNvbnN0IGV4aXN0aW5nU2V0dGxlbWVudElkcyA9IGF3YWl0IGt2LnNtZW1iZXJzKHNldHRsZW1lbnRzSW5kZXhLZXkpO1xyXG4gICAgICBcclxuICAgICAgaWYgKGV4aXN0aW5nU2V0dGxlbWVudElkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YUtleXMgPSBleGlzdGluZ1NldHRsZW1lbnRJZHMubWFwKGlkID0+IGJ1aWxkRGF0YUtleSgnc2V0dGxlbWVudHMnLCBpZCkpO1xyXG4gICAgICAgIGF3YWl0IGt2LmRlbCguLi5kYXRhS2V5cyk7XHJcbiAgICAgICAgYXdhaXQga3YuZGVsKHNldHRsZW1lbnRzSW5kZXhLZXkpO1xyXG4gICAgICAgIHJlc3VsdHMucHVzaChgQ2xlYXJlZCAke2V4aXN0aW5nU2V0dGxlbWVudElkcy5sZW5ndGh9IGV4aXN0aW5nIHNldHRsZW1lbnRzYCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIEltcG9ydCBlYWNoIHNldHRsZW1lbnRcclxuICAgICAgZm9yIChjb25zdCBzZXR0bGVtZW50IG9mIHNldHRsZW1lbnRzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnN0IGRhdGFLZXkgPSBidWlsZERhdGFLZXkoJ3NldHRsZW1lbnRzJywgc2V0dGxlbWVudC5pZCk7XHJcbiAgICAgICAgICBhd2FpdCBrdi5zZXQoZGF0YUtleSwgSlNPTi5zdHJpbmdpZnkoc2V0dGxlbWVudCkpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBBZGQgdG8gc2V0dGxlbWVudHMgaW5kZXhcclxuICAgICAgICAgIGF3YWl0IGt2LnNhZGQoc2V0dGxlbWVudHNJbmRleEtleSwgc2V0dGxlbWVudC5pZCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihgW0ltcG9ydERhdGFXb3JrZmxvd10g4pqg77iPIEZhaWxlZCB0byBpbXBvcnQgc2V0dGxlbWVudCAke3NldHRsZW1lbnQuaWR9OmAsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJlc3VsdHMucHVzaChgSW1wb3J0ZWQgJHtzZXR0bGVtZW50cy5sZW5ndGh9IHNldHRsZW1lbnRzIGFzIHJlZmVyZW5jZSBkYXRhYCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBbSW1wb3J0RGF0YVdvcmtmbG93XSDinIUgSW1wb3J0ZWQgJHtzZXR0bGVtZW50cy5sZW5ndGh9IHNldHRsZW1lbnRzYCk7XHJcbiAgICAgIFxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc3QgZXJyb3JNc2cgPSBgRmFpbGVkIHRvIGltcG9ydCBzZXR0bGVtZW50czogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gO1xyXG4gICAgICBlcnJvcnMucHVzaChlcnJvck1zZyk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFtJbXBvcnREYXRhV29ya2Zsb3ddIOKdjCAke2Vycm9yTXNnfWApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsia3YiLCJidWlsZERhdGFLZXkiLCJidWlsZEluZGV4S2V5IiwiYnVpbGRMb2dLZXkiLCJJbXBvcnREYXRhV29ya2Zsb3ciLCJleGVjdXRlIiwiaW1wb3J0RGF0YSIsImNvbnNvbGUiLCJsb2ciLCJpc0tWIiwiQm9vbGVhbiIsInByb2Nlc3MiLCJlbnYiLCJLVl9SRVNUX0FQSV9VUkwiLCJpc1NlcnZlciIsInJlc3VsdHMiLCJlcnJvcnMiLCJzdWNjZXNzIiwibWVzc2FnZSIsImRhdGEiLCJvcGVyYXRpb24iLCJlbnZpcm9ubWVudCIsInJlcXVpcmVzQ2xpZW50RXhlY3V0aW9uIiwidmFsaWRhdGVJbXBvcnREYXRhIiwiaW1wb3J0QWxsRGF0YSIsImxlbmd0aCIsImVycm9yIiwiRXJyb3IiLCJwdXNoIiwiZW50aXRpZXMiLCJyZXF1aXJlZEVudGl0eVR5cGVzIiwiZW50aXR5VHlwZSIsIkFycmF5IiwiaXNBcnJheSIsImxpbmtzIiwibG9ncyIsInNldHRsZW1lbnRzIiwiZW50aXR5VHlwZXMiLCJpbXBvcnRFbnRpdHlUeXBlIiwiZXJyb3JNc2ciLCJpbXBvcnRTZXR0bGVtZW50cyIsImltcG9ydExpbmtzIiwiaW1wb3J0TG9ncyIsImluZGV4S2V5IiwiZXhpc3RpbmdJZHMiLCJzbWVtYmVycyIsImRhdGFLZXlzIiwibWFwIiwiaWQiLCJkZWwiLCJpbXBvcnRlZENvdW50IiwiZW50aXR5Iiwid2FybiIsImRhdGFLZXkiLCJzZXQiLCJKU09OIiwic3RyaW5naWZ5Iiwic2FkZCIsImxpbmtzSW5kZXhLZXkiLCJleGlzdGluZ0xpbmtJZHMiLCJsaW5rS2V5cyIsImxpbmsiLCJsaW5rS2V5IiwibG9nVHlwZXMiLCJsb2dUeXBlIiwibG9nRW50cmllcyIsImxvZ0tleSIsImxvZ0VudHJ5IiwibHB1c2giLCJzZXR0bGVtZW50c0luZGV4S2V5IiwiZXhpc3RpbmdTZXR0bGVtZW50SWRzIiwic2V0dGxlbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./workflows/settings/import-data-workflow.ts\n");

/***/ }),

/***/ "(rsc)/./workflows/settings/index.ts":
/*!*************************************!*\
  !*** ./workflows/settings/index.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BackfillLogsWorkflow: () => (/* reexport safe */ _backfill_logs_workflow__WEBPACK_IMPORTED_MODULE_3__.BackfillLogsWorkflow),\n/* harmony export */   ClearCacheWorkflow: () => (/* reexport safe */ _clear_cache_workflow__WEBPACK_IMPORTED_MODULE_2__.ClearCacheWorkflow),\n/* harmony export */   ClearLogsWorkflow: () => (/* reexport safe */ _clear_logs_workflow__WEBPACK_IMPORTED_MODULE_1__.ClearLogsWorkflow),\n/* harmony export */   ExportDataWorkflow: () => (/* reexport safe */ _export_data_workflow__WEBPACK_IMPORTED_MODULE_4__.ExportDataWorkflow),\n/* harmony export */   ImportDataWorkflow: () => (/* reexport safe */ _import_data_workflow__WEBPACK_IMPORTED_MODULE_5__.ImportDataWorkflow),\n/* harmony export */   ResetDataWorkflow: () => (/* reexport safe */ _reset_data_workflow__WEBPACK_IMPORTED_MODULE_0__.ResetDataWorkflow),\n/* harmony export */   SeedDataWorkflow: () => (/* reexport safe */ _seed_data_workflow__WEBPACK_IMPORTED_MODULE_6__.SeedDataWorkflow)\n/* harmony export */ });\n/* harmony import */ var _reset_data_workflow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reset-data-workflow */ \"(rsc)/./workflows/settings/reset-data-workflow.ts\");\n/* harmony import */ var _clear_logs_workflow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clear-logs-workflow */ \"(rsc)/./workflows/settings/clear-logs-workflow.ts\");\n/* harmony import */ var _clear_cache_workflow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./clear-cache-workflow */ \"(rsc)/./workflows/settings/clear-cache-workflow.ts\");\n/* harmony import */ var _backfill_logs_workflow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./backfill-logs-workflow */ \"(rsc)/./workflows/settings/backfill-logs-workflow.ts\");\n/* harmony import */ var _export_data_workflow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./export-data-workflow */ \"(rsc)/./workflows/settings/export-data-workflow.ts\");\n/* harmony import */ var _import_data_workflow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./import-data-workflow */ \"(rsc)/./workflows/settings/import-data-workflow.ts\");\n/* harmony import */ var _seed_data_workflow__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./seed-data-workflow */ \"(rsc)/./workflows/settings/seed-data-workflow.ts\");\n// workflows/settings/index.ts\n// Settings workflows barrel export\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi93b3JrZmxvd3Mvc2V0dGluZ3MvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw4QkFBOEI7QUFDOUIsbUNBQW1DO0FBRXVCO0FBQ0E7QUFDRTtBQUNJO0FBQ0o7QUFDQTtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZ2FtZS1hZG1pbi8uL3dvcmtmbG93cy9zZXR0aW5ncy9pbmRleC50cz83MTg1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHdvcmtmbG93cy9zZXR0aW5ncy9pbmRleC50c1xyXG4vLyBTZXR0aW5ncyB3b3JrZmxvd3MgYmFycmVsIGV4cG9ydFxyXG5cclxuZXhwb3J0IHsgUmVzZXREYXRhV29ya2Zsb3cgfSBmcm9tICcuL3Jlc2V0LWRhdGEtd29ya2Zsb3cnO1xyXG5leHBvcnQgeyBDbGVhckxvZ3NXb3JrZmxvdyB9IGZyb20gJy4vY2xlYXItbG9ncy13b3JrZmxvdyc7XHJcbmV4cG9ydCB7IENsZWFyQ2FjaGVXb3JrZmxvdyB9IGZyb20gJy4vY2xlYXItY2FjaGUtd29ya2Zsb3cnO1xyXG5leHBvcnQgeyBCYWNrZmlsbExvZ3NXb3JrZmxvdyB9IGZyb20gJy4vYmFja2ZpbGwtbG9ncy13b3JrZmxvdyc7XHJcbmV4cG9ydCB7IEV4cG9ydERhdGFXb3JrZmxvdyB9IGZyb20gJy4vZXhwb3J0LWRhdGEtd29ya2Zsb3cnO1xyXG5leHBvcnQgeyBJbXBvcnREYXRhV29ya2Zsb3cgfSBmcm9tICcuL2ltcG9ydC1kYXRhLXdvcmtmbG93JztcclxuZXhwb3J0IHsgU2VlZERhdGFXb3JrZmxvdyB9IGZyb20gJy4vc2VlZC1kYXRhLXdvcmtmbG93JztcclxuXHJcbi8vIENvbW1vbiB0eXBlc1xyXG5leHBvcnQgdHlwZSB7IFNldHRpbmdzUmVzdWx0IH0gZnJvbSAnLi9yZXNldC1kYXRhLXdvcmtmbG93JztcclxuZXhwb3J0IHR5cGUgeyBSZXNldE9wdGlvbnMgfSBmcm9tICcuL3Jlc2V0LWRhdGEtd29ya2Zsb3cnO1xyXG4iXSwibmFtZXMiOlsiUmVzZXREYXRhV29ya2Zsb3ciLCJDbGVhckxvZ3NXb3JrZmxvdyIsIkNsZWFyQ2FjaGVXb3JrZmxvdyIsIkJhY2tmaWxsTG9nc1dvcmtmbG93IiwiRXhwb3J0RGF0YVdvcmtmbG93IiwiSW1wb3J0RGF0YVdvcmtmbG93IiwiU2VlZERhdGFXb3JrZmxvdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./workflows/settings/index.ts\n");

/***/ }),

/***/ "(rsc)/./workflows/settings/reset-data-workflow.ts":
/*!***************************************************!*\
  !*** ./workflows/settings/reset-data-workflow.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResetDataWorkflow: () => (/* binding */ ResetDataWorkflow)\n/* harmony export */ });\n/* harmony import */ var _vercel_kv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/kv */ \"(rsc)/./node_modules/@vercel/kv/dist/index.js\");\n/* harmony import */ var _data_store_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/data-store/keys */ \"(rsc)/./data-store/keys.ts\");\n// workflows/settings/reset-data-workflow.ts\n// Reset Data Workflow for KV-only architecture\n\n\nclass ResetDataWorkflow {\n    /**\r\n   * Execute reset data operation\r\n   */ static async execute(mode = \"defaults\") {\n        try {\n            console.log(`[ResetDataWorkflow] 🔄 Starting reset data operation (mode: ${mode})...`);\n            const isKV = Boolean(process.env.KV_REST_API_URL);\n            const isServer = \"undefined\" === \"undefined\";\n            const results = [];\n            const errors = [];\n            console.log(`[ResetDataWorkflow] 🌍 Environment: ${isKV ? \"KV (Production)\" : \"Local (Development)\"}`);\n            console.log(`[ResetDataWorkflow] 🖥️ Context: ${isServer ? \"Server\" : \"Client\"}`);\n            // For local environment, we need to run on client side\n            if (!isKV && isServer) {\n                console.log(`[ResetDataWorkflow] ⚠️ Local environment detected on server - returning instruction for client-side execution`);\n                return {\n                    success: true,\n                    message: \"Reset requires client-side execution for local environment\",\n                    data: {\n                        results: [\n                            \"Client-side reset required for local environment\"\n                        ],\n                        errors: [],\n                        mode,\n                        environment: \"local\",\n                        requiresClientExecution: true\n                    }\n                };\n            }\n            // Handle client-side execution for localhost\n            if (!isKV && !isServer) {\n                console.log(`[ResetDataWorkflow] 🖥️ Running client-side reset for localhost...`);\n                return await this.executeClientSideReset(mode, results, errors);\n            }\n            // Define reset options\n            const options = {\n                mode,\n                seedSites: mode === \"defaults\",\n                preserveLogs: false\n            };\n            // Clear all entity data\n            await this.clearAllEntityData(results, errors);\n            // Clear all links\n            await this.clearAllLinks(results, errors);\n            // Clear logs if not preserving\n            if (!options.preserveLogs) {\n                await this.clearAllLogs(results, errors);\n            }\n            // Seed default data if requested\n            if (options.seedSites) {\n                await this.seedDefaultSites(results, errors);\n            }\n            const success = errors.length === 0;\n            const message = success ? `Successfully reset data (${mode} mode) - ${results.length} operations completed` : `Reset completed with ${errors.length} errors - ${results.length} operations completed`;\n            console.log(`[ResetDataWorkflow] ✅ Reset data operation completed: ${message}`);\n            return {\n                success,\n                message,\n                data: {\n                    results,\n                    errors,\n                    mode,\n                    environment: isKV ? \"kv\" : \"local\"\n                }\n            };\n        } catch (error) {\n            console.error(\"[ResetDataWorkflow] ❌ Reset data operation failed:\", error);\n            return {\n                success: false,\n                message: `Reset data operation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                data: {\n                    results: [],\n                    errors: [\n                        error instanceof Error ? error.message : \"Unknown error\"\n                    ],\n                    mode,\n                    environment: \"unknown\"\n                }\n            };\n        }\n    }\n    /**\r\n   * Clear all entity data from KV\r\n   */ static async clearAllEntityData(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83D\\uDDD1️ Clearing all entity data...\");\n            const entityTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\"\n            ];\n            for (const entityType of entityTypes){\n                try {\n                    // Get all entity IDs from index\n                    const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(entityType);\n                    const entityIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(indexKey);\n                    if (entityIds.length > 0) {\n                        // Delete all entity data\n                        const dataKeys = entityIds.map((id)=>(0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(entityType, id));\n                        await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(...dataKeys);\n                        // Clear the index\n                        await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(indexKey);\n                        results.push(`Cleared ${entityIds.length} ${entityType} entities`);\n                        console.log(`[ResetDataWorkflow] ✅ Cleared ${entityIds.length} ${entityType} entities`);\n                    } else {\n                        results.push(`No ${entityType} entities to clear`);\n                    }\n                } catch (error) {\n                    const errorMsg = `Failed to clear ${entityType}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[ResetDataWorkflow] ❌ ${errorMsg}`);\n                }\n            }\n        } catch (error) {\n            const errorMsg = `Failed to clear entity data: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ResetDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Clear all links from KV\r\n   */ static async clearAllLinks(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83D\\uDD17 Clearing all links...\");\n            // Get all link IDs\n            const linksIndexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"links\");\n            const linkIds = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.smembers(linksIndexKey);\n            if (linkIds.length > 0) {\n                // Delete all link data\n                const linkKeys = linkIds.map((id)=>`links:link:${id}`);\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(...linkKeys);\n                // Clear the links index\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(linksIndexKey);\n                // Clear all entity-specific link indexes\n                const entityTypes = [\n                    \"tasks\",\n                    \"items\",\n                    \"sales\",\n                    \"financials\",\n                    \"characters\",\n                    \"players\",\n                    \"sites\"\n                ];\n                for (const entityType of entityTypes){\n                    const entityLinkIndexPattern = `index:links:by-entity:${entityType}:*`;\n                    const entityLinkKeys = await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.keys(entityLinkIndexPattern);\n                    if (entityLinkKeys.length > 0) {\n                        await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(...entityLinkKeys);\n                    }\n                }\n                results.push(`Cleared ${linkIds.length} links`);\n                console.log(`[ResetDataWorkflow] ✅ Cleared ${linkIds.length} links`);\n            } else {\n                results.push(\"No links to clear\");\n            }\n        } catch (error) {\n            const errorMsg = `Failed to clear links: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ResetDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Clear all logs from KV\r\n   */ static async clearAllLogs(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83D\\uDCDD Clearing all logs...\");\n            const logTypes = [\n                \"tasks\",\n                \"items\",\n                \"sales\",\n                \"financials\",\n                \"characters\",\n                \"players\",\n                \"sites\",\n                \"links\"\n            ];\n            for (const logType of logTypes){\n                try {\n                    const logKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildLogKey)(logType);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.del(logKey);\n                    results.push(`Cleared ${logType} logs`);\n                } catch (error) {\n                    const errorMsg = `Failed to clear ${logType} logs: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[ResetDataWorkflow] ❌ ${errorMsg}`);\n                }\n            }\n        } catch (error) {\n            const errorMsg = `Failed to clear logs: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ResetDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Seed default sites\r\n   */ static async seedDefaultSites(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83C\\uDF31 Seeding default sites...\");\n            const defaultSites = [\n                {\n                    id: \"home\",\n                    name: \"Home\",\n                    type: \"physical\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Uvita\",\n                        location: {\n                            lat: 9.1500,\n                            lng: -83.7500\n                        }\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"feria-box\",\n                    name: \"Feria Box\",\n                    type: \"physical\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Uvita\",\n                        location: {\n                            lat: 9.1500,\n                            lng: -83.7500\n                        }\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"digital-space\",\n                    name: \"Digital Space\",\n                    type: \"cloud\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Cloud\",\n                        location: null\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                }\n            ];\n            for (const site of defaultSites){\n                try {\n                    const dataKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(\"sites\", site.id);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.set(dataKey, JSON.stringify(site));\n                    // Add to sites index\n                    const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"sites\");\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.sadd(indexKey, site.id);\n                    results.push(`Seeded site: ${site.name}`);\n                } catch (error) {\n                    const errorMsg = `Failed to seed site ${site.name}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[ResetDataWorkflow] ❌ ${errorMsg}`);\n                }\n            }\n            console.log(\"[ResetDataWorkflow] ✅ Seeded default sites\");\n        } catch (error) {\n            const errorMsg = `Failed to seed default sites: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ResetDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Execute client-side reset for localhost (localStorage)\r\n   */ static async executeClientSideReset(mode, results, errors) {\n        try {\n            console.log(`[ResetDataWorkflow] 🖥️ Starting client-side reset (mode: ${mode})...`);\n            // Clear localStorage data\n            const keysToRemove = [];\n            // Find all data keys in localStorage\n            for(let i = 0; i < localStorage.length; i++){\n                const key = localStorage.key(i);\n                if (key && (key.startsWith(\"data:\") || key.startsWith(\"index:\") || key.startsWith(\"links:\") || key.startsWith(\"log:\") || key.startsWith(\"akiles:\"))) {\n                    keysToRemove.push(key);\n                }\n            }\n            // Remove all found keys\n            keysToRemove.forEach((key)=>{\n                localStorage.removeItem(key);\n                results.push(`Removed localStorage key: ${key}`);\n            });\n            // Seed default sites if in defaults mode\n            if (mode === \"defaults\") {\n                await this.seedDefaultSitesLocal(results, errors);\n            }\n            // Clear any cached data\n            if (\"caches\" in window) {\n                try {\n                    const cacheNames = await caches.keys();\n                    for (const cacheName of cacheNames){\n                        await caches.delete(cacheName);\n                        results.push(`Cleared cache: ${cacheName}`);\n                    }\n                } catch (cacheError) {\n                    console.warn(\"[ResetDataWorkflow] Cache clearing failed:\", cacheError);\n                }\n            }\n            console.log(`[ResetDataWorkflow] ✅ Client-side reset completed: ${results.length} operations`);\n            return {\n                success: errors.length === 0,\n                message: `Client-side reset completed (${mode} mode) - ${results.length} operations completed`,\n                data: {\n                    results,\n                    errors,\n                    mode,\n                    environment: \"local\"\n                }\n            };\n        } catch (error) {\n            const errorMsg = `Client-side reset failed: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ResetDataWorkflow] ❌ ${errorMsg}`);\n            return {\n                success: false,\n                message: errorMsg,\n                data: {\n                    results: [],\n                    errors,\n                    mode,\n                    environment: \"local\"\n                }\n            };\n        }\n    }\n    /**\r\n   * Seed default sites for localhost (localStorage)\r\n   */ static async seedDefaultSitesLocal(results, errors) {\n        try {\n            console.log(\"[ResetDataWorkflow] \\uD83C\\uDF31 Seeding default sites for localhost...\");\n            const defaultSites = [\n                {\n                    id: \"home\",\n                    name: \"Home\",\n                    type: \"physical\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Uvita\",\n                        location: {\n                            lat: 9.1500,\n                            lng: -83.7500\n                        }\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"feria-box\",\n                    name: \"Feria Box\",\n                    type: \"physical\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Uvita\",\n                        location: {\n                            lat: 9.1500,\n                            lng: -83.7500\n                        }\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"digital-space\",\n                    name: \"Digital Space\",\n                    type: \"cloud\",\n                    status: \"active\",\n                    metadata: {\n                        settlement: \"Cloud\",\n                        location: null\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                }\n            ];\n            for (const site of defaultSites){\n                try {\n                    // Store site data\n                    const dataKey = `data:sites:${site.id}`;\n                    localStorage.setItem(dataKey, JSON.stringify(site));\n                    // Add to sites index\n                    const indexKey = \"index:sites\";\n                    const existingIndex = localStorage.getItem(indexKey);\n                    const indexSet = new Set(existingIndex ? JSON.parse(existingIndex) : []);\n                    indexSet.add(site.id);\n                    localStorage.setItem(indexKey, JSON.stringify([\n                        ...indexSet\n                    ]));\n                    results.push(`Seeded localStorage site: ${site.name}`);\n                } catch (error) {\n                    const errorMsg = `Failed to seed localStorage site ${site.name}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[ResetDataWorkflow] ❌ ${errorMsg}`);\n                }\n            }\n            console.log(\"[ResetDataWorkflow] ✅ Seeded default sites for localhost\");\n        } catch (error) {\n            const errorMsg = `Failed to seed default sites for localhost: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[ResetDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./workflows/settings/reset-data-workflow.ts\n");

/***/ }),

/***/ "(rsc)/./workflows/settings/seed-data-workflow.ts":
/*!**************************************************!*\
  !*** ./workflows/settings/seed-data-workflow.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SeedDataWorkflow: () => (/* binding */ SeedDataWorkflow)\n/* harmony export */ });\n/* harmony import */ var _vercel_kv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/kv */ \"(rsc)/./node_modules/@vercel/kv/dist/index.js\");\n/* harmony import */ var _data_store_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/data-store/keys */ \"(rsc)/./data-store/keys.ts\");\n// workflows/settings/seed-data-workflow.ts\n// Seed Data Workflow for KV-only architecture\n\n\nclass SeedDataWorkflow {\n    /**\r\n   * Execute seed data operation\r\n   */ static async execute(source = \"constants\") {\n        try {\n            console.log(`[SeedDataWorkflow] 🌱 Starting seed data operation (source: ${source})...`);\n            const isKV = Boolean(process.env.KV_REST_API_URL);\n            const isServer = \"undefined\" === \"undefined\";\n            const results = [];\n            const errors = [];\n            console.log(`[SeedDataWorkflow] 🌍 Environment: ${isKV ? \"KV (Production)\" : \"Local (Development)\"}`);\n            console.log(`[SeedDataWorkflow] 🖥️ Context: ${isServer ? \"Server\" : \"Client\"}`);\n            // For local environment, we need to run on client side\n            if (!isKV && isServer) {\n                console.log(`[SeedDataWorkflow] ⚠️ Local environment detected on server - returning instruction for client-side execution`);\n                return {\n                    success: true,\n                    message: \"Seed data requires client-side execution for local environment\",\n                    data: {\n                        results: [\n                            \"Client-side seed data required for local environment\"\n                        ],\n                        errors: [],\n                        operation: \"seed-data\",\n                        environment: \"local\",\n                        source,\n                        requiresClientExecution: true\n                    }\n                };\n            }\n            // Seed data based on source\n            if (source === \"constants\") {\n                await this.seedFromConstants(results, errors);\n            } else if (source === \"backup\") {\n                await this.seedFromBackup(results, errors);\n            }\n            const success = errors.length === 0;\n            const message = success ? `Successfully seeded data from ${source} - ${results.length} operations completed` : `Seed data completed with ${errors.length} errors - ${results.length} operations completed`;\n            console.log(`[SeedDataWorkflow] ✅ Seed data operation completed: ${message}`);\n            return {\n                success,\n                message,\n                data: {\n                    results,\n                    errors,\n                    operation: \"seed-data\",\n                    environment: isKV ? \"kv\" : \"local\",\n                    source\n                }\n            };\n        } catch (error) {\n            console.error(\"[SeedDataWorkflow] ❌ Seed data operation failed:\", error);\n            return {\n                success: false,\n                message: `Seed data operation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                data: {\n                    results: [],\n                    errors: [\n                        error instanceof Error ? error.message : \"Unknown error\"\n                    ],\n                    operation: \"seed-data\",\n                    environment: \"unknown\",\n                    source\n                }\n            };\n        }\n    }\n    /**\r\n   * Seed data from constants\r\n   */ static async seedFromConstants(results, errors) {\n        try {\n            console.log(\"[SeedDataWorkflow] \\uD83C\\uDF31 Seeding data from constants...\");\n            // Seed default sites\n            await this.seedDefaultSites(results, errors);\n            // Seed default tasks\n            await this.seedDefaultTasks(results, errors);\n        } catch (error) {\n            const errorMsg = `Failed to seed from constants: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[SeedDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Seed data from backup\r\n   */ static async seedFromBackup(results, errors) {\n        try {\n            console.log(\"[SeedDataWorkflow] \\uD83C\\uDF31 Seeding data from backup...\");\n            // For now, just seed from constants as backup functionality would require\n            // reading backup files which is not implemented yet\n            results.push(\"Backup seeding not yet implemented, using constants instead\");\n            await this.seedFromConstants(results, errors);\n        } catch (error) {\n            const errorMsg = `Failed to seed from backup: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[SeedDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Seed default sites and settlements\r\n   */ static async seedDefaultSites(results, errors) {\n        try {\n            console.log(\"[SeedDataWorkflow] \\uD83C\\uDF31 Seeding default sites and settlements...\");\n            // Load sites-db.json data\n            const sitesDbData = await this.loadSitesDbData();\n            if (sitesDbData) {\n                // Seed settlements first\n                if (sitesDbData.settlements && Array.isArray(sitesDbData.settlements)) {\n                    await this.seedSettlements(sitesDbData.settlements, results, errors);\n                }\n                // Seed sites\n                if (sitesDbData.sites && Array.isArray(sitesDbData.sites)) {\n                    await this.seedSites(sitesDbData.sites, results, errors);\n                }\n            } else {\n                // Fallback to hardcoded data if sites-db.json not available\n                await this.seedFallbackSites(results, errors);\n            }\n            console.log(\"[SeedDataWorkflow] ✅ Seeded default sites\");\n        } catch (error) {\n            const errorMsg = `Failed to seed default sites: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[SeedDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Seed default tasks\r\n   */ static async seedDefaultTasks(results, errors) {\n        try {\n            console.log(\"[SeedDataWorkflow] \\uD83C\\uDF31 Seeding default tasks...\");\n            const defaultTasks = [\n                {\n                    id: \"welcome-task\",\n                    name: \"Welcome to TheGame\",\n                    description: \"Your first task in TheGame system\",\n                    type: \"strategy\",\n                    status: \"created\",\n                    priority: \"medium\",\n                    station: \"Strategy\",\n                    area: \"ADMIN\",\n                    progress: 0,\n                    dueDate: null,\n                    order: 1,\n                    cost: 0,\n                    revenue: 0,\n                    siteId: \"home\",\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                }\n            ];\n            for (const task of defaultTasks){\n                try {\n                    const dataKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(\"tasks\", task.id);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.set(dataKey, JSON.stringify(task));\n                    // Add to tasks index\n                    const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"tasks\");\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.sadd(indexKey, task.id);\n                    results.push(`Seeded task: ${task.name}`);\n                } catch (error) {\n                    const errorMsg = `Failed to seed task ${task.name}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[SeedDataWorkflow] ❌ ${errorMsg}`);\n                }\n            }\n            console.log(\"[SeedDataWorkflow] ✅ Seeded default tasks\");\n        } catch (error) {\n            const errorMsg = `Failed to seed default tasks: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[SeedDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Load sites-db.json data\r\n   */ static async loadSitesDbData() {\n        try {\n            // Try to load from backup file\n            const fs = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n            const path = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"path\", 23));\n            const backupPath = path.join(process.cwd(), \"backups\", \"sites\", \"sites-db.json\");\n            if (fs.existsSync(backupPath)) {\n                const data = fs.readFileSync(backupPath, \"utf8\");\n                return JSON.parse(data);\n            }\n            return null;\n        } catch (error) {\n            console.warn(\"[SeedDataWorkflow] ⚠️ Could not load sites-db.json:\", error);\n            return null;\n        }\n    }\n    /**\r\n   * Seed settlements from sites-db.json\r\n   */ static async seedSettlements(settlements, results, errors) {\n        try {\n            console.log(\"[SeedDataWorkflow] \\uD83C\\uDF31 Seeding settlements...\");\n            for (const settlement of settlements){\n                try {\n                    const dataKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(\"settlements\", settlement.id);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.set(dataKey, JSON.stringify(settlement));\n                    // Add to settlements index\n                    const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"settlements\");\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.sadd(indexKey, settlement.id);\n                    results.push(`Seeded settlement: ${settlement.name}`);\n                } catch (error) {\n                    const errorMsg = `Failed to seed settlement ${settlement.name}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[SeedDataWorkflow] ❌ ${errorMsg}`);\n                }\n            }\n            console.log(\"[SeedDataWorkflow] ✅ Seeded settlements\");\n        } catch (error) {\n            const errorMsg = `Failed to seed settlements: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[SeedDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Seed sites from sites-db.json\r\n   */ static async seedSites(sites, results, errors) {\n        try {\n            console.log(\"[SeedDataWorkflow] \\uD83C\\uDF31 Seeding sites...\");\n            for (const site of sites){\n                try {\n                    const dataKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(\"sites\", site.id);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.set(dataKey, JSON.stringify(site));\n                    // Add to sites index\n                    const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"sites\");\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.sadd(indexKey, site.id);\n                    results.push(`Seeded site: ${site.name}`);\n                } catch (error) {\n                    const errorMsg = `Failed to seed site ${site.name}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[SeedDataWorkflow] ❌ ${errorMsg}`);\n                }\n            }\n            console.log(\"[SeedDataWorkflow] ✅ Seeded sites\");\n        } catch (error) {\n            const errorMsg = `Failed to seed sites: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[SeedDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n    /**\r\n   * Fallback sites seeding (hardcoded data)\r\n   */ static async seedFallbackSites(results, errors) {\n        try {\n            console.log(\"[SeedDataWorkflow] \\uD83C\\uDF31 Seeding fallback sites...\");\n            const defaultSites = [\n                {\n                    id: \"home\",\n                    name: \"Home\",\n                    description: \"Home base\",\n                    metadata: {\n                        type: \"PHYSICAL\",\n                        businessType: \"STORE\",\n                        settlementId: \"settlement-uvita\",\n                        googleMapsAddress: \"https://maps.app.goo.gl/...\"\n                    },\n                    isActive: true,\n                    status: \"active\",\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"feria-box\",\n                    name: \"Feria Box\",\n                    description: \"Feria sales location\",\n                    metadata: {\n                        type: \"PHYSICAL\",\n                        businessType: \"STORE\",\n                        settlementId: \"settlement-uvita\",\n                        googleMapsAddress: \"https://maps.app.goo.gl/...\"\n                    },\n                    isActive: true,\n                    status: \"active\",\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                },\n                {\n                    id: \"digital-space\",\n                    name: \"Digital Space\",\n                    description: \"Digital workspace\",\n                    metadata: {\n                        type: \"CLOUD\",\n                        digitalType: \"WEBSITE\"\n                    },\n                    isActive: true,\n                    status: \"active\",\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    links: []\n                }\n            ];\n            for (const site of defaultSites){\n                try {\n                    const dataKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildDataKey)(\"sites\", site.id);\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.set(dataKey, JSON.stringify(site));\n                    // Add to sites index\n                    const indexKey = (0,_data_store_keys__WEBPACK_IMPORTED_MODULE_0__.buildIndexKey)(\"sites\");\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_1__.kv.sadd(indexKey, site.id);\n                    results.push(`Seeded fallback site: ${site.name}`);\n                } catch (error) {\n                    const errorMsg = `Failed to seed fallback site ${site.name}: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n                    errors.push(errorMsg);\n                    console.error(`[SeedDataWorkflow] ❌ ${errorMsg}`);\n                }\n            }\n            console.log(\"[SeedDataWorkflow] ✅ Seeded fallback sites\");\n        } catch (error) {\n            const errorMsg = `Failed to seed fallback sites: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n            errors.push(errorMsg);\n            console.error(`[SeedDataWorkflow] ❌ ${errorMsg}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./workflows/settings/seed-data-workflow.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@upstash","vendor-chunks/@vercel","vendor-chunks/uncrypto","vendor-chunks/jose"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsettings%2Froute&page=%2Fapi%2Fsettings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsettings%2Froute.ts&appDir=C%3A%5CUsers%5CUsuario%5CAKILES%5CGAME%20WEB%20APP%5CSPLIT%5Cthegame%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CUsuario%5CAKILES%5CGAME%20WEB%20APP%5CSPLIT%5Cthegame&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();